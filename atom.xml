<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>WisdowsBlog</title>
  
  <subtitle> WisdowsBlog,如果人生有遗憾，那就是没有早点遇到你~ </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wisdows.github.io/"/>
  <updated>2019-11-15T10:09:47.000Z</updated>
  <id>https://wisdows.github.io/</id>
  
  <author>
    <name>Wisdows</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录搭建过程nginx</title>
    <link href="https://wisdows.github.io/2019/11/16/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8Bnginx/"/>
    <id>https://wisdows.github.io/2019/11/16/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8Bnginx/</id>
    <published>2019-11-15T19:36:27.871Z</published>
    <updated>2019-11-15T10:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、centos下安装nginx"><a href="#一、centos下安装nginx" class="headerlink" title="一、centos下安装nginx"></a>一、centos下安装nginx</h2><h3 id="1-安装编译工具及库文件"><a href="#1-安装编译工具及库文件" class="headerlink" title="1.安装编译工具及库文件"></a>1.安装编译工具及库文件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></tbody></table></figure><h3 id="2-安装-PCRE（让-Nginx-支持-Rewrite-功能）"><a href="#2-安装-PCRE（让-Nginx-支持-Rewrite-功能）" class="headerlink" title="2.安装 PCRE（让 Nginx 支持 Rewrite 功能）"></a>2.安装 PCRE（让 Nginx 支持 Rewrite 功能）</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#下载最新版本的，注意不要用pcre2</span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/pcre/pcre/8.42/pcre-8.42.tar.gz</span><br><span class="line">tar -xvf pcre-8.42.tar.gz</span><br><span class="line">cd pcre-8.42 </span><br><span class="line">#安装编译</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">#查看pcre版本</span><br><span class="line">pcre-config --version</span><br></pre></td></tr></tbody></table></figure><h3 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#下载</span><br><span class="line">wget https://nginx.org/download/nginx-1.15.9.tar.gz</span><br><span class="line">tar -xvf nginx-1.15.9.tar.gz</span><br><span class="line">cd nginx-1.15.9</span><br><span class="line">#编译安装</span><br><span class="line">./configure --prefix=/opt/nginx</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">#查看版本</span><br><span class="line">/opt/nginx/sbin/nginx -v</span><br></pre></td></tr></tbody></table></figure><h3 id="4-nginx配置"><a href="#4-nginx配置" class="headerlink" title="4.nginx配置"></a>4.nginx配置</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   html/hexo;</span><br><span class="line">            index  index.html;</span><br><span class="line">        }</span><br><span class="line">        location ~.*\.(gif|jpg|jpeg|png|bmp|swf|htm|ico|js|css)$ {</span><br><span class="line">            root html/public;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="二、hexo部署"><a href="#二、hexo部署" class="headerlink" title="二、hexo部署"></a>二、hexo部署</h2><h4 id="1-在nginx目录的html下新建文件夹hexo"><a href="#1-在nginx目录的html下新建文件夹hexo" class="headerlink" title="1.在nginx目录的html下新建文件夹hexo"></a>1.在nginx目录的html下新建文件夹hexo</h4><h4 id="2-在本地开发好了。运行-hexo-g"><a href="#2-在本地开发好了。运行-hexo-g" class="headerlink" title="2.在本地开发好了。运行 hexo g"></a>2.在本地开发好了。运行 hexo g</h4><h4 id="3-将编译后的文件上传到html下新建文件夹hexo"><a href="#3-将编译后的文件上传到html下新建文件夹hexo" class="headerlink" title="3.将编译后的文件上传到html下新建文件夹hexo"></a>3.将编译后的文件上传到html下新建文件夹hexo</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、centos下安装nginx&quot;&gt;&lt;a href=&quot;#一、centos下安装nginx&quot; class=&quot;headerlink&quot; title=&quot;一、centos下安装nginx&quot;&gt;&lt;/a&gt;一、centos下安装nginx&lt;/h2&gt;&lt;h3 id=&quot;1-安装编译工具及
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>排序算法_冒泡、选择、快速</title>
    <link href="https://wisdows.github.io/2019/11/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%86%92%E6%B3%A1%E3%80%81%E9%80%89%E6%8B%A9%E3%80%81%E5%BF%AB%E9%80%9F/"/>
    <id>https://wisdows.github.io/2019/11/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E5%86%92%E6%B3%A1%E3%80%81%E9%80%89%E6%8B%A9%E3%80%81%E5%BF%AB%E9%80%9F/</id>
    <published>2019-11-15T19:36:12.450Z</published>
    <updated>2019-10-31T14:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、数组的排序常用方法："><a href="#1、数组的排序常用方法：" class="headerlink" title="1、数组的排序常用方法："></a>1、数组的排序常用方法：</h2><pre><code>冒泡法、选择排序、插入排序、快速排序、</code></pre><h2 id="2、排序分类："><a href="#2、排序分类：" class="headerlink" title="2、排序分类："></a>2、排序分类：</h2><pre><code>内部排序：指将需要处理的所有数据都加载到内部存储器中进行排序。  内部排序又分为交换式（冒泡法、快速排序）、选择式、插入式排序法  冒泡法、选择排序、插入排序、快速排序都属于内部排序外部排序：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</code></pre><h3 id="3、排序方法效率："><a href="#3、排序方法效率：" class="headerlink" title="3、排序方法效率："></a>3、排序方法效率：</h3><pre><code>冒泡发&lt;选择排序&lt;插入排序快速排序法速度很快，但效率并不高，占用空间太多</code></pre><h2 id="4、冒泡排序法实例："><a href="#4、冒泡排序法实例：" class="headerlink" title="4、冒泡排序法实例："></a>4、冒泡排序法实例：</h2><p>冒泡排序的基本概念是：依次比较相邻的两个数，将小数放在前面，大数放在后面。即首先比较第1 个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。重复以上过程，仍从第一对数开始比较（因为可能由于第2个数和第3个数的交换，使得第1个数不再大于第2个数），将小数放前，大数放后，一直比较到最小数前的一对相邻数，将小数放前，大数放后，第二趟结束，在倒数第二个数中得到一个新的最小数。如此下去，直至最终完成排序。由于在排序过程中总是小数往前放，大数往后放，相当于气泡往上升，所以称作冒泡排序。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//echo "&lt;br&gt;";echo"&lt;br&gt;";echo "&lt;br&gt;";echo "&lt;br&gt;";</span><br><span class="line"> </span><br><span class="line">$arr =array(1,5,3,9,4,8,12,3,0,7,7.6,3.4,6);</span><br><span class="line">//定义一个中间变量</span><br><span class="line">$temp = 0;</span><br><span class="line">//升序排序</span><br><span class="line">for($i=0;$i&lt;count($arr)-1;$i++)</span><br><span class="line">{</span><br><span class="line">         for($j=0;$j&lt;count($arr)-1-$i;$j++)</span><br><span class="line">         {        //说明前面的数比后面的大就要交换</span><br><span class="line">                   if($arr[$j]&gt;$arr[$j+1])</span><br><span class="line">                   {</span><br><span class="line">                            $temp= $arr[$j];</span><br><span class="line">                            $arr[$j]= $arr[$j+1];</span><br><span class="line">                            $arr[$j+1]= $temp;</span><br><span class="line">                   }</span><br><span class="line">         }</span><br><span class="line">}       </span><br><span class="line">//输出排序后数组</span><br><span class="line">foreach($arr as $key=&gt;$key_value)</span><br><span class="line">{</span><br><span class="line">         echo'$arr['.$key."]=".$key_value."&lt;br&gt;";</span><br><span class="line">}</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="5、选择排序法实例详解："><a href="#5、选择排序法实例详解：" class="headerlink" title="5、选择排序法实例详解："></a>5、选择排序法实例详解：</h2><p>选择排序法的思路：就是再第一次循环中，假设第一个数是最小的；然后跟第二个数比较，一直比到最后，找出最小值，然后把最小值跟第一个数的位置互换；再进行下一次循环，找出最小值跟第二个位置的数互换；一直循环数组的个数减去1次；数组就成了有序的了</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function selectSort(&amp;$arr)  </span><br><span class="line">//注意此处要加地址传递符号；因为数组默认传递的是值，不是地址；若不地址传递，排序的是$arr而不是$asd。</span><br><span class="line">{</span><br><span class="line">//$arr = array(1,5,3,9,4,8,12,3,0,7,7.6,3.4,6);</span><br><span class="line">//定义一个中间变量</span><br><span class="line">$temp = 0;</span><br><span class="line">//升序排序</span><br><span class="line">for($i=0;$i&lt;count($arr)-1;$i++)</span><br><span class="line">{</span><br><span class="line">//假设$i就是最小的数</span><br><span class="line">$minVal=$arr[$i];</span><br><span class="line">//记录我认为最小数的下标</span><br><span class="line">$minIndex=$i;</span><br><span class="line">for($j=$i+1;$j&lt;count($arr);$j++)</span><br><span class="line">{//如果我认为的最小值不是最小</span><br><span class="line">if($minVal&gt;$arr[$j])</span><br><span class="line">{</span><br><span class="line">$minVal = $arr[$j];</span><br><span class="line">$minIndex = $j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">//最后交换</span><br><span class="line">$temp = $arr[$i];</span><br><span class="line">$arr[$i] = $arr[$minIndex];</span><br><span class="line">$arr[$minIndex] = $temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">$asd = array(1,0,2,9,3,8,4,7,5,6);</span><br><span class="line">//调用选择排序法的函数</span><br><span class="line">selectSort($asd);</span><br><span class="line">//输出排序后数组  升序显示</span><br><span class="line">foreach($asd as $key=&gt;$key_value)</span><br><span class="line">{</span><br><span class="line">echo '$asd['.$key."]=".$key_value."&lt;br&gt;";</span><br><span class="line">}</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="6、PHP快速排序法："><a href="#6、PHP快速排序法：" class="headerlink" title="6、PHP快速排序法："></a>6、PHP快速排序法：</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//快速排序法封装函数</span><br><span class="line">function quick_Sort($array){</span><br><span class="line">//先判断是否需要继续进行，若所要排序数组只有一个元素或没有元素则不需要排序</span><br><span class="line">    $len = count($array);</span><br><span class="line">    if($len &lt;= 1)</span><br><span class="line">{</span><br><span class="line">        return $array;</span><br><span class="line">    }</span><br><span class="line">    //如果所给数组元素大于1个，需要排序</span><br><span class="line">//选择数组第一个元素作为标尺</span><br><span class="line">$key = $array[0];</span><br><span class="line">//初始化两个数组</span><br><span class="line">    $left_array = array();//小于标尺的</span><br><span class="line">    $right_array = array();//大于标尺的</span><br><span class="line">     </span><br><span class="line">    //遍历所给数组除了标尺外的所有元素，按照大小关系放入两个数组内</span><br><span class="line">    for($i=1;$i&lt;$len;$i++){</span><br><span class="line">        if($array[$i]&lt;$key){</span><br><span class="line">//如果数组元素小于标尺则将该元素放入左数组</span><br><span class="line">            $left_array[] = $array[$i];</span><br><span class="line">        }else{</span><br><span class="line">//如果数组元素大于标尺则将该元素放入右数组</span><br><span class="line">            $right_array[] = $array[$i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    //再分别对 左数组 和 右数组进行相同的排序处理方式</span><br><span class="line">//递归调用这个函数,并记录结果 </span><br><span class="line">    $left_array = quick_Sort($left_array);</span><br><span class="line">    $right_array = quick_Sort($right_array);</span><br><span class="line">    //合并左数组 标尺 右数组</span><br><span class="line">//array_merge() 函数把两个或多个数组合并为一个数组。</span><br><span class="line">//如果键名有重复，后面的键名的值覆盖前面的键名的值。如果数组是数字索引的，则键名会以连续方式重新索引。</span><br><span class="line">//语法   array_merge(array1,array2,array3...)</span><br><span class="line">    return array_merge($left_array,array($key),$right_array);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">$sortarray = array(13,89,23,9,19,88,56,78,34,69,10,14);</span><br><span class="line">print_r(quick_Sort($sortarray));</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、数组的排序常用方法：&quot;&gt;&lt;a href=&quot;#1、数组的排序常用方法：&quot; class=&quot;headerlink&quot; title=&quot;1、数组的排序常用方法：&quot;&gt;&lt;/a&gt;1、数组的排序常用方法：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;冒泡法、选择排序、插入排序、快速排序、&lt;/c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB介绍</title>
    <link href="https://wisdows.github.io/2019/11/16/MongoDB%E4%BB%8B%E7%BB%8D/"/>
    <id>https://wisdows.github.io/2019/11/16/MongoDB%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-11-15T19:36:08.772Z</published>
    <updated>2019-10-31T14:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h3><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</li><li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li><li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li><li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li><li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li><li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li><li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li><li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li><li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>MongoDB安装简单。</li></ul><h3 id="MongoDB-下载"><a href="#MongoDB-下载" class="headerlink" title="MongoDB 下载"></a>MongoDB 下载</h3><p>你可以在mongodb官网下载该安装包，地址为：<a href="https://www.mongodb.com/download-center#community。" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community。</a></p><h3 id="MongoDB-工具"><a href="#MongoDB-工具" class="headerlink" title="MongoDB 工具"></a>MongoDB 工具</h3><p>有几种可用于MongoDB的管理工具。</p><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><p>MongoDB提供了网络和系统监控工具Munin，它作为一个插件应用于MongoDB中。</p><p>Gangila是MongoDB高性能的系统监视的工具，它作为一个插件应用于MongoDB中。</p><p>基于图形界面的开源工具 Cacti, 用于查看CPU负载, 网络带宽利用率,它也提供了一个应用于监控 MongoDB 的插件。</p><h4 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h4><p>Fang of Mongo – 网页式,由Django和jQuery所构成。</p><p>Futon4Mongo – 一个CouchDB Futon web的mongodb山寨版。</p><p>Mongo3 – Ruby写成。</p><p>MongoHub – 适用于OSX的应用程序。</p><p>Opricot – 一个基于浏览器的MongoDB控制台, 由PHP撰写而成。</p><p>Database Master — Windows的mongodb管理工具</p><p>RockMongo — 最好的PHP语言的MongoDB管理工具，轻量级, 支持多国语言.</p><h3 id="MongoDB-应用案例"><a href="#MongoDB-应用案例" class="headerlink" title="MongoDB 应用案例"></a>MongoDB 应用案例</h3><p>Craiglist上使用MongoDB的存档数十亿条记录。</p><p>FourSquare，基于位置的社交网站，在Amazon EC2的服务器上使用MongoDB分享数据。</p><p>Shutterfly，以互联网为基础的社会和个人出版服务，使用MongoDB的各种持久性数据存储的要求。</p><p>bit.ly, 一个基于Web的网址缩短服务，使用MongoDB的存储自己的数据。</p><p>spike.com，一个MTV网络的联营公司， spike.com使用MongoDB的。</p><p>Intuit公司，一个为小企业和个人的软件和服务提供商，为小型企业使用MongoDB的跟踪用户的数据。</p><p>sourceforge.net，资源网站查找，创建和发布开源软件免费，使用MongoDB的后端存储。</p><p>etsy.com ，一个购买和出售手工制作物品网站，使用MongoDB。</p><p>纽约时报，领先的在线新闻门户网站之一，使用MongoDB。</p><p>CERN，著名的粒子物理研究所，欧洲核子研究中心大型强子对撞机的数据使用MongoDB。</p><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><p>以MacOs系统为例</p><p>mongodb官网下载该安装包，地址为：<a href="https://www.mongodb.com/download-center#community。" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community。</a></p><h4 id="使用-curl-命令来下载安装："><a href="#使用-curl-命令来下载安装：" class="headerlink" title="使用 curl 命令来下载安装："></a>使用 curl 命令来下载安装：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 进入 /usr/local</span><br><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line"># 下载</span><br><span class="line">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line"></span><br><span class="line"># 重命名为 mongodb 目录</span><br><span class="line"></span><br><span class="line">sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</span><br><span class="line">安装完成后，我们可以把 MongoDB 的二进制命令文件目录（安装目录/bin）添加到 PATH 路径中：</span><br><span class="line"></span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-brew-安装"><a href="#使用-brew-安装" class="headerlink" title="使用 brew 安装"></a>使用 brew 安装</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line"></span><br><span class="line">安装MongoDB社区服务器的最新可用生产版本（包括所有命令行工具）。</span><br><span class="line"></span><br><span class="line">$ brew install mongodb-community</span><br><span class="line"></span><br><span class="line">创建全局路径 PATH：</span><br><span class="line"></span><br><span class="line">编辑 ~/.bash_profile</span><br><span class="line"></span><br><span class="line">添加：</span><br><span class="line">export PATH=$PATH:/usr/local/Cellar/mongodb-community/<span class="number">4.2</span><span class="number">.1</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要安装支持 TLS/SSL 命令如下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo brew install mongodb --with-openssl</span></span><br><span class="line"><span class="comment">#安装最新开发版本：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo brew install mongodb --devel</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运行-MongoDB"><a href="#运行-MongoDB" class="headerlink" title="运行 MongoDB"></a>运行 MongoDB</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、首先我们创建一个数据库存储目录 ~/data/db：</span><br><span class="line"></span><br><span class="line">mkdir -p ~/data/db</span><br><span class="line"></span><br><span class="line">启动 mongodb，数据库目录指向 ~/data/db：</span><br><span class="line"></span><br><span class="line">mongod --dbpath ~/data/db/</span><br><span class="line"></span><br><span class="line">再打开一个终端进入执行以下命令：</span><br><span class="line"></span><br><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v4.0.9</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session { "id" : UUID("3c12bf4f-695c-48b2-b160-8420110ccdcf") }</span><br><span class="line">MongoDB server version: 4.0.9</span><br><span class="line">……</span><br><span class="line">&gt; 1 + 1</span><br><span class="line">2</span><br><span class="line">&gt; </span><br><span class="line">注意：默认的数据库目录为 /data/db：如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。</span><br></pre></td></tr></tbody></table></figure><h3 id="MongoDB-概念解析"><a href="#MongoDB-概念解析" class="headerlink" title="MongoDB 概念解析"></a>MongoDB 概念解析</h3><p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。</p><p>下表将帮助您更容易理解Mongo中的一些概念：</p><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/wmlc/blog/master/gitImg/20191031222716.png" srcset="undefined" alt="Mongo与sql对比"></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>一个mongodb中可以建立多个数据库。</p><p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p><p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p><code>"show dbs" 命令可以显示所有数据的列表。</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; show dbs</span><br><span class="line">local  0.078GB</span><br><span class="line">test   0.078GB</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>执行 "db" 命令可以显示当前数据库对象或集合。</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; db</span><br><span class="line">test</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>运行"use"命令，可以连接到一个指定的数据库。</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use local</span><br><span class="line">switched to db local</span><br><span class="line">&gt; db</span><br><span class="line">local</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><p>以上实例命令中，”local” 是你要链接的数据库。</p><p>数据库名可以是满足以下条件的任意UTF-8字符串。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不能是空字符串（"")。</span><br><span class="line">不得含有' '（空格)、.、$、/、\和\0 (空字符)。</span><br><span class="line">应全部小写。</span><br><span class="line">最多64字节。</span><br></pre></td></tr></tbody></table></figure><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。</span><br><span class="line">        一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</span><br><span class="line">local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</span><br><span class="line">config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</span><br></pre></td></tr></tbody></table></figure><h3 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h3><p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>一个简单的文档例子如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{"site":"www.runoob.com", "name":"菜鸟教程"}</span><br></pre></td></tr></tbody></table></figure><p>下表列出了 RDBMS 与 MongoDB 对应的术语：</p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>主键 (MongoDB 提供了 key 为 _id )</td></tr></tbody></table><table><thead><tr><th>数据库服务</th><th>客户端</th></tr></thead><tbody><tr><td>Mysqld/Oracle</td><td>mongod</td></tr><tr><td>mysql/sqlplus</td><td>mongo</td></tr></tbody></table><p>需要注意的是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文档中的键/值对是有序的。</span><br><span class="line">文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</span><br><span class="line">MongoDB区分类型和大小写。</span><br><span class="line">MongoDB的文档不能有重复的键。</span><br><span class="line">文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</span><br></pre></td></tr></tbody></table></figure><p>文档键命名规范：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">键不能含有\0 (空字符)。这个字符用来表示键的结尾。</span><br><span class="line">.和$有特别的意义，只有在特定环境下才能使用。</span><br><span class="line">以下划线"_"开头的键是保留的(不是严格要求的)。</span><br></pre></td></tr></tbody></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p><p>{“site”:”<a href="http://www.baidu.com&quot;}" target="_blank" rel="noopener">www.baidu.com"}</a><br>{“site”:”<a href="http://www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;}" target="_blank" rel="noopener">www.google.com","name":"Google"}</a><br>{“site”:”<a href="http://www.runoob.com&quot;,&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;num&quot;:5}" target="_blank" rel="noopener">www.runoob.com","name":"菜鸟教程","num":5}</a><br>当第一个文档插入时，集合就会被创建。</p><p>合法的集合名<br>集合名不能是空字符串””。<br>集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾。<br>集合名不能以”system.”开头，这是为系统集合保留的前缀。<br>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。　<br>如下实例：</p><p>db.col.findOne()<br>capped collections<br>Capped collections 就是固定大小的collection。</p><p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。</p><p>Capped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。</p><p>Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。</p><p>由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 oplog.rs 就是利用 Capped Collection 来实现的。</p><p>要注意的是指定的存储大小包含了数据库的头信息。</p><p>db.createCollection(“mycoll”, {capped:true, size:100000})<br>在 capped collection 中，你能添加新的对象。<br>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。<br>使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。<br>删除之后，你必须显式的重新创建这个 collection。<br>在32bit机器中，capped collection 最大存储为 1e9( 1X109)个字节。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是MongoDB&quot;&gt;&lt;a href=&quot;#什么是MongoDB&quot; class=&quot;headerlink&quot; title=&quot;什么是MongoDB&quot;&gt;&lt;/a&gt;什么是MongoDB&lt;/h3&gt;&lt;p&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在html页面中引入css的几种方式</title>
    <link href="https://wisdows.github.io/2019/11/16/%E5%9C%A8html%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%BC%95%E5%85%A5css%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://wisdows.github.io/2019/11/16/%E5%9C%A8html%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%BC%95%E5%85%A5css%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2019-11-15T19:36:05.257Z</published>
    <updated>2019-10-31T14:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css主要有三种引用方法："><a href="#css主要有三种引用方法：" class="headerlink" title="css主要有三种引用方法："></a>css主要有三种引用方法：</h3><h4 id="引用外部CSS文件"><a href="#引用外部CSS文件" class="headerlink" title="引用外部CSS文件"></a>引用外部CSS文件</h4><p>用<link>标签引用外部的css文件，将样式引用到html文档来。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" href="style.css"&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="内部定义Style样式"><a href="#内部定义Style样式" class="headerlink" title="内部定义Style样式"></a>内部定义Style样式</h4><p>在html文档中在<style>标签里面写的css样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  bdoy&#123;font-size:14px;&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>在标签中使用style属性将当前的标签样式改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;color:red&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>内联样式 &gt; 内部定义Style样式 &gt; 引用外部CSS文件</p></style></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;css主要有三种引用方法：&quot;&gt;&lt;a href=&quot;#css主要有三种引用方法：&quot; class=&quot;headerlink&quot; title=&quot;css主要有三种引用方法：&quot;&gt;&lt;/a&gt;css主要有三种引用方法：&lt;/h3&gt;&lt;h4 id=&quot;引用外部CSS文件&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面向对象特性与设计原则</title>
    <link href="https://wisdows.github.io/2019/11/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://wisdows.github.io/2019/11/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E6%80%A7%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2019-11-15T19:35:49.236Z</published>
    <updated>2019-10-31T14:55:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三大特性是：封装、继承、多态"><a href="#三大特性是：封装、继承、多态" class="headerlink" title="三大特性是：封装、继承、多态"></a>三大特性是：封装、继承、多态</h3><p>所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p><p>封装是面向对象的特征之一，是对象和类概念的主要特性。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</p><p>所谓继承是指可以让某个类型的对象获得另一个类型的对象的属性的方法,它支持按级分类的概念。</p><p>继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</p><p>所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。</p><p>多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p><h3 id="五大设计原则"><a href="#五大设计原则" class="headerlink" title="五大设计原则"></a>五大设计原则</h3><h4 id="单一职责原则-The-Single-Responsibility-Principle"><a href="#单一职责原则-The-Single-Responsibility-Principle" class="headerlink" title="单一职责原则 (The Single Responsibility Principle)"></a>单一职责原则 (The Single Responsibility Principle)</h4><p>一个类的功能要单一，不能包罗万象；<br>修改某个类的理由应该只有一个，如果超过一个，说明类承担不止一个职责，要视情况拆分。</p><h4 id="开放封闭原则-The-Open-Closed-Principle"><a href="#开放封闭原则-The-Open-Closed-Principle" class="headerlink" title="开放封闭原则 (The Open Closed Principle)"></a>开放封闭原则 (The Open Closed Principle)</h4><p>软件实体应该对扩展开放，对修改封闭。一般不要直接修改类库源码（即使你有源代码），通过继承等方式扩展。</p><h4 id="里氏替代原则-The-Liskov-Substitution-Principle"><a href="#里氏替代原则-The-Liskov-Substitution-Principle" class="headerlink" title="里氏替代原则 (The Liskov Substitution Principle)"></a>里氏替代原则 (The Liskov Substitution Principle)</h4><p>当一个子类的实例能够被替换成任何超类的实例时，它们之间才是真正的 is-a 关系。<br>即子类应当可以替换父类并出现在父类能够出现的任何地方。</p><h4 id="依赖倒置原则-The-Dependency-Inversion-Principle"><a href="#依赖倒置原则-The-Dependency-Inversion-Principle" class="headerlink" title="依赖倒置原则 (The Dependency Inversion Principle)"></a>依赖倒置原则 (The Dependency Inversion Principle)</h4><p>高层模块不应该依赖于底层模块，二者都应该依赖于抽象。换句话说，依赖于抽象，不要依赖于具体实现。比方说，你不会把电器电源线焊死在室内电源接口处，而是用标准的插头插在标准的插座 (抽象) 上。</p><h4 id="接口分离原则-The-Interface-Segregation-Principle"><a href="#接口分离原则-The-Interface-Segregation-Principle" class="headerlink" title="接口分离原则 (The Interface Segregation Principle)"></a>接口分离原则 (The Interface Segregation Principle)</h4><p>模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来</p><p>不要强迫用户去依赖它们不使用的接口。换句话说，使用多个专门的接口比使用单一的大而全接口要好。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三大特性是：封装、继承、多态&quot;&gt;&lt;a href=&quot;#三大特性是：封装、继承、多态&quot; class=&quot;headerlink&quot; title=&quot;三大特性是：封装、继承、多态&quot;&gt;&lt;/a&gt;三大特性是：封装、继承、多态&lt;/h3&gt;&lt;p&gt;所谓封装，也就是把客观事物封装成抽象的类，并
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>联机编写教程-极光</title>
    <link href="https://wisdows.github.io/2019/11/16/%E8%81%94%E6%9C%BA%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E6%9E%81%E5%85%89/"/>
    <id>https://wisdows.github.io/2019/11/16/%E8%81%94%E6%9C%BA%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E6%9E%81%E5%85%89/</id>
    <published>2019-11-15T19:32:22.152Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>无名杀联机扩展编写教程</strong></p><p><strong>前言：</strong></p><p>用这个方法相当于源码添加武将包（卡包），跳过了一些禁止联机的判断，从而达到扩展联机效果。</p><p><strong>框架：</strong></p><p>game.import(“extension”,function(lib,game,ui,get,ai,_status){return {name:”扩展名”,content:function (config,pack){</p><p>​    if(config.武将包名英文){</p><p>​        for(var i in lib.characterPack[‘武将包名英文’]) {</p><p>​            if(lib.character[i][4].indexOf(“forbidai”)&lt;0) lib.character[i][4].push(“forbidai”);</p><p>​        };</p><p>​    };//选项触发内容，原因见config</p><p>},precontent:function(武将包名英文){</p><p>​    if(武将包名英文.enable){</p><p>​        //武将包</p><p>​        game.import(‘character’,function(){</p><p>​            var 武将包名英文={</p><p>​                name:’武将包名英文’,//武将包命名（必填）</p><p>​                connect:true,//该武将包是否可以联机（必填）</p><p>​                character:{ </p><p>​                    //武将格式:</p><p>​                    //“武将名字”:[“性别”,”势力”,体力,[技能],[]],</p><p>​                    //格式内每一样东西都不能缺少，否则无法导入该武将包及其以下内容</p><p>​                },//武将（必填）</p><p>​                characterIntro:{}, //武将介绍（选填）</p><p>​                characterTitle:{},//武将标题（用于写称号或注释）（选填）</p><p>​                skill:{},//技能（必填）</p><p>​                translate:{},//翻译（必填）</p><p>​                perfectPair:{},//珠联璧合武将（选填）</p><p>​            };</p><p>​            if(lib.device||lib.node){</p><p>​                for(var i in 武将包名英文.character){武将包名英文.character[i][4].push(‘ext:扩展名/‘+i+’.jpg’);}</p><p>​            }else{</p><p>​                for(var i in 武将包名英文.character){武将包名英文.character[i][4].push(‘db:extension-扩展名:’+i+’.jpg’);}</p><p>​            }//由于以此法加入的武将包武将图片是用源文件的，所以要用此法改变路径</p><p>​            return 武将包名英文;</p><p>​        });</p><p>​        lib.config.all.characters.push(‘武将包名英文’);</p><p>​        if(!lib.config.characters.contains(‘武将包名英文’)) lib.config.characters.push(‘武将包名英文’);</p><p>​        lib.translate[‘武将包名英文_character_config’]=’武将包名’;// 包名翻译</p><p>​        //卡包（手牌）</p><p>​        game.import(‘card’,function(){</p><p>​            var 卡包名英文={</p><p>​            name:’卡包名英文’,//卡包命名</p><p>​            connect:true,//卡包是否可以联机</p><p>​            card:{</p><p>​                ‘卡名’:{</p><p>​                    image:’ext:扩展名/卡名.jpg’,    //卡牌图片</p><p>​                    //以下与一般卡牌一样</p><p>​                },//卡 格式</p><p>​                skill:{},//技能</p><p>​                translate:{},//翻译</p><p>​                list:[],//牌堆添加</p><p>​            };</p><p>​            return 卡包名英文;</p><p>​        });</p><p>​        lib.translate[‘卡包名英文_card_config’]=’卡包名’;</p><p>​        lib.config.all.cards.push(‘卡包名英文’);</p><p>​        if(!lib.config.cards.contains(‘卡包名英文’)) lib.config.cards.push(‘卡包名英文’);//包名翻译</p><p>​    };</p><p>},config:{</p><p>​    “武将包名英文”:{“name”:”将武将包名内武将设为禁用”,”init”:false},</p><p>​    //由于以此法添加的武将包自带的禁用按钮无法使用，需要写这个选项来禁用该武将包武将（单机）</p><p>},help:{},package:{</p><p>​    character:{</p><p>​        character:{</p><p>​        },</p><p>​        translate:{</p><p>​        },</p><p>​    },</p><p>​    card:{</p><p>​        card:{</p><p>​        },</p><p>​        translate:{</p><p>​        },</p><p>​        list:[],</p><p>​    },</p><p>​    skill:{</p><p>​        skill:{</p><p>​        },</p><p>​        translate:{</p><p>​        },</p><p>​    },</p><p>​    intro:””,</p><p>​    author:”Aurora”,</p><p>​    diskURL:””,</p><p>​    forumURL:””,</p><p>​    version:””,</p><p>},files:{“character”:[],”card”:[],”skill”:[]}}})</p><p><strong>注意事项：</strong></p><p>1.有些函数触发时，主机不会发送触发内容给客机，这是就要用game.broadcastAll(function(){})或game.broadcast (function(){})。（具体用法看源码，不举例）</p><p>2.如果是储存类的联机扩展（不如联机皮肤什么的）解决方法：</p><p>（1）数据位于服务器，直接读取。</p><p>（2）数据位于本地，在主机将信息发送给客机时改动。（我找不到端口，不具体说明）</p><p>3.联机时，客机扩展要和主机一致，否则客机发生错误。</p><p>4.同一个扩展可以以此法添加多个武将包或卡包。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;无名杀联机扩展编写教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用这个方法相当于源码添加武将包（卡包），跳过了一些禁止联机的判断，从而达到扩展联机效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;框架：&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>无名杀触发机制</title>
    <link href="https://wisdows.github.io/2019/11/16/%E6%97%A0%E5%90%8D%E6%9D%80%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://wisdows.github.io/2019/11/16/%E6%97%A0%E5%90%8D%E6%9D%80%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6/</id>
    <published>2019-11-15T19:32:22.144Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="触发机制1"><a href="#触发机制1" class="headerlink" title="触发机制1"></a>触发机制1</h3><p>　　【阶段类】</p><p>　　gameStart</p><p>　　所有人都展示武将牌后 (前缀必须为global)</p><p>　　gameDrawBefore/Begin/End/After</p><p>　　游戏开始阶段 前/时/后/结束后 (前缀必须为global)</p><p>　　phaseBefore/Begin/End/After</p><p>　　回合阶段 开始前/时/后/结束后</p><p>　　judgeBefore/Begin/End/After</p><p>　　判定阶段 开始前/时/后/结束后</p><p>　　phaseDrawBefore/Begin/End/After</p><p>　　摸牌阶段 开始前/时/后/结束后</p><p>　　phaseUseBefore/Begin/End/After</p><p>　　出牌阶段 开始前/时/后/结束后</p><p>　　discardBefore/Begin/End/After</p><p>　　弃牌阶段 开始前/时/后/结束后</p><p>　　【卡牌类】</p><p>　　shaBefore/Begin/End/After/Miss</p><p>　　使用杀 之前/时/后/结束后/被闪后</p><p>　　juedouBeforeBegin/End/After</p><p>　　使用决斗 之前/时/后/结束后</p><p>　　loseBefore/Begin/End/After</p><p>　　失去卡牌 之前/时/后/结束后</p><p>　　gainBefore/Begin/End/After</p><p>　　获得卡牌 之前/时/后/结束后</p><p>　　useCardBefore/Begin/End/After</p><p>　　使用卡牌 之前/时/后/结束后</p><p>　　useCardToBefore/Begin/End/After</p><p>　　使用卡牌指定 之前/时/后/结束后</p><p>　　respondBefore/Begin/End/After</p><p>　　打出卡牌 之前/时/后/结束后</p><p>　　drawBefore/Begin/End/After</p><p>　　从牌堆摸牌 之前/时/后/结束后</p><p>　　equipBefore/Begin/End/After</p><p>　　装备装备牌 之前/时/后/结束后</p><p>　　【体力类】</p><p>　　damageBefore/Begin/End/After</p><p>　　受到伤害 之前/时/后/结束后</p><p>　　(若前缀为source则为你造成伤害)</p><p>　　loseHpBefore/Begin/End/After</p><p>　　失去(流失)体力 之前/时/后/结束后</p><p>　　recoverBefore/Begin/End/After</p><p>　　回复体力 之前/时/后/结束后</p><p>　　changeHp</p><p>　　体力值发生改变后</p><p>　　loseMaxHpBefore/Begin/End/After</p><p>　　减少体力上限 之前/时/后/结束后</p><p>　　gainMaxHpBefore/Begin/End/After</p><p>　　增加体力上限 之前/时/后/结束后</p><p>　　【状态类】</p><p>　　chooseToRespondBefore/Begin/End/After</p><p>　　打出卡牌 之前/时/后/结束后</p><p>　　turnOverBefore/Begin/End/After</p><p>　　武将牌翻面 之前/时/后/结束后</p><p>　　linkBefore/Begin/End/After</p><p>　　武将牌横置(连环) 之前/时/后/结束后</p><p>　　dyingBefore/Begin/End/After</p><p>　　进入濒临状态 之前/时/后/结束后</p><p>　　dieBefore/Begin</p><p>　　死亡 之前/时</p><h3 id="触发机制2"><a href="#触发机制2" class="headerlink" title="触发机制2"></a>触发机制2</h3><p>　　enable:”phaseUse”, 回合使用</p><p>　　enable:”chooseToUse”, 挑选卡牌以使用</p><p>　　enable:”chooseToRespond”, 挑选卡牌以响应</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;触发机制1&quot;&gt;&lt;a href=&quot;#触发机制1&quot; class=&quot;headerlink&quot; title=&quot;触发机制1&quot;&gt;&lt;/a&gt;触发机制1&lt;/h3&gt;&lt;p&gt;　　【阶段类】&lt;/p&gt;
&lt;p&gt;　　gameStart&lt;/p&gt;
&lt;p&gt;　　所有人都展示武将牌后 (前缀必须为globa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>无名杀技能编写教程</title>
    <link href="https://wisdows.github.io/2019/11/16/%E6%97%A0%E5%90%8D%E6%9D%80%E6%8A%80%E8%83%BD%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/"/>
    <id>https://wisdows.github.io/2019/11/16/%E6%97%A0%E5%90%8D%E6%9D%80%E6%8A%80%E8%83%BD%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-15T19:32:22.142Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无名杀技能编写教程"><a href="#无名杀技能编写教程" class="headerlink" title="无名杀技能编写教程"></a>无名杀技能编写教程</h2><p><strong>前言：</strong></p><p>​    (1)每写一个对象前，请确认是否有这一对象，没有的话请自行定义</p><p>​    (2)检测bug用lib.node.debug()</p><p>​    (3)具体触发内容看game.js内lib.element.event内的函数</p><p>​    (4)本教程只教框架</p><p><strong>1.触发：</strong></p><p>​    基本框架：</p><p>​    trigger:{//触发时机</p><p>​        global:’damageBefore’,//例子，任意一名角色受到伤害前</p><p>​        player:’damageBefore’,//例子，玩家受到伤害前</p><p>​        player:[‘damageBefore’, ‘recoverAfter’], //例子，玩家受到伤害前或玩家恢复体力后</p><p>​    },</p><p>​    priority: 1,//同时机技能发动的优先度</p><p>​    check:function(event,player){//告诉ai是否发动这个技能，返回true则发动此技能</p><p>​        //无例子，因为不同时机evevt参数内的元素不同</p><p>​        //要了解evevt参数内的元素，具体看game.js内lib.element.event内的函数    </p><p>​    },</p><p>​    frequent:true,//此技能是否可以被设置为自动发动（不询问）</p><p>​    forced:true,//此技能是否能固定触发，true为固定触发（锁定技）</p><p>​    nopop:true,//player是否logSkill(‘此技能’)，true为不</p><p>​    direct:true,//相当于上面两行相加</p><p>​    filter:function(event,player){//触发条件，返回true则发动此技能</p><p>​        //无例子，因为不同时机evevt参数内的元素不同</p><p>​        //要了解evevt参数内的元素，具体看game.js内lib.element.event内的函数</p><p>​    },</p><p>​    content:function(){//触发内容，分步执行会在后面讲到</p><p>​                   //参数trigger相当于filter:function(event,player){}内的event</p><p>​        player.recover()//例子，玩家回复一点体力</p><p>​    },</p><p><strong>2.主动：</strong></p><p>​    基本框架：</p><p>​    enable:”phaseUse”,//出牌阶段使用</p><p>​    usable:1,//每回合限制使用次数    </p><p>​           //限制使用次数为变量时需写在filter:function(event,player){}内</p><p>​    filter:function(event,player){ //发动条件，返回true则可以发动此技能</p><p>​        /*限制使用次数为变量时:</p><p>​         if(player.getStat().skill[‘技能名’]&gt;=变量) return false;（变量可以写player.hp等）</p><p>​         return true;</p><p>​        */</p><p>​        return player.hp&lt;2;//例子，玩家体力小于2时可以发动</p><p>​    },</p><p>​    filterCard:function(card){//选择的牌需要满足的条件</p><p>​        return get.color(card)==’red’;//例子，只能选择红色牌</p><p>​    },</p><p>​    position:’hej’,//可以选择什么位置的牌</p><p>​               //写入其中的字符：’h’：手牌区, ‘e’：装备区, ‘j’：判定区</p><p>​    selectCard:2,//需要选择多少张牌才能发动</p><p>​               //为-1时，选择所有牌</p><p>​               //为数组时，这个数组就是选择牌数的区间</p><p>​               /*为变量时（具体情况具体分析）:</p><p>​                 function(card){//例子，变量为玩家体力时</p><p>​                      var pl=get.owner(card);//pl定义为选择牌中的牌的拥有者，即“你”</p><p>​                      return [pl.hp,Infinity];//返回可选手牌数为你的体力值到无限</p><p>​                 },</p><p>​               */</p><p>​    check:function(card){//ai应该如何选牌，返回值为正则此牌可选，反之，此牌不可选</p><p>​        /*在check中定义玩家（你）：</p><p>​         var player=get.owner(card);</p><p>​        */</p><p>​        return 6-get.value(card);//例子，ai可选价值大于6的卡牌</p><p>​    },</p><p>​    discard:false,//是否弃牌，若没有这一行，选择牌发动技能后，被选择的牌都要弃置</p><p>​    prepare:’give’,//不弃牌，准备用这些牌来干什么</p><p>​    filterTarget:function(card,player,target){//选择的目标需要满足的条件</p><p>​        return target!=player;//例子，目标不是玩家</p><p>​    },</p><p>​    selectTarget:1, //需要选择多少个目标才能发动</p><p>​                 //为-1时，选择全部人</p><p>​                 //为数组时，这个数组就是选择目标数的区间</p><p>​    multitarget:true,//是否每个目标都结算一次，true为否</p><p>​    targetprompt:[],//选择的目标武将牌上出现什么字，数组第几元素对应第几个目标</p><p>​    content:function (){//触发内容，分步执行会在后面讲到</p><p>​                   //当有filterCard时，有参数cards</p><p>​                   //当有filterTarget时，有参数target和targets</p><p>​        player.recover()//例子，玩家回复一点体力</p><p>​    },</p><p><strong>3.视为：</strong></p><p>（1）转化为一张卡牌：</p><p>​    基本框架：</p><p>​    name:’技能’,//技能按钮名字，不写则默认为此技能的翻译</p><p>​    enable:[‘phaseUse’,’chooseToRespond’],//发动视为技的时机，现在为出牌阶段和响应时</p><p>​    viewAsFilter:function(player){//视为技按钮出现条件（即发动条件）</p><p>​        return player.maxHp==4;//例子，玩家最大体力值为4时可以发动</p><p>​    },</p><p>​    filterCard:{type:’basic’},//选择的牌需要满足什么条件</p><p>​    /*上面那种是简便写法，多次判断的话还是要写回旧格式：</p><p>​     filterCard:function(card){</p><p>​         return get.color(card)==’black’;//例子，只能选择黑色牌</p><p>​     },</p><p>​    */</p><p>​    position:’hej’,//可以选择什么位置的牌，和主动的position相同，不解释</p><p>​    selectCard:2, //需要选择多少张牌才能发动，和主动的selectCard相同，不解释</p><p>​    check:function(card){// ai应该如何选牌，和主动的check相同，不解释</p><p>​        return 1;//例子，ai可以所有所有手牌</p><p>​    },</p><p>​    viewAs:{name:’tao’},//目标卡牌</p><p>​    prompt:’将一张基本牌当桃使用或打出’,//选择时弹出的提示</p><p>​    onuse:function(result,player){//使用视为牌时触发内容，result.cards是视为前的牌</p><p>​        player.recover();//例子，使用视为牌时玩家回复一点体力</p><p>​    },</p><p>（2）转化为多张卡牌：</p><p>​    基本框架：</p><p>​    enable:’phaseUse’, //发动视为技的时机，现在为出牌阶段</p><p>​    usable:1, //每回合限制使用次数，和主动的usable相同，不解释</p><p>​    filter:function(event,player){ //发动条件，和主动的filter相同，不解释</p><p>​        return player.countCards(‘h’)&gt;0//例子，玩家手牌数大于0时可以发动</p><p>​    },</p><p>​    chooseButton:{//选择按钮（牌）</p><p>​        dialog:function(){//选择内容，一般为选择卡牌，有能力的可以写成选择其他东西</p><p>​            return ui.create.dialog([[‘sha’,’shan’],’vcard’]);//可以选择杀和闪（卡牌）</p><p>​        },</p><p>​        filter:function(button,player){//卡牌选择条件</p><p>​            return lib.filter.filterCard({name:button.link[2]},player,_status.event.getParent());</p><p>​            //例子，你可以选择你可以使用的卡牌</p><p>​        },</p><p>​        check:function(button){//ai如何选牌</p><p>​            /*定义player：</p><p>​            var player=_status.event.player;</p><p>​            */</p><p>​            if(button.link==’sha’) return 1;//ai选择杀</p><p>​        },</p><p>​        backup:function(links,player){//返回视为（1）部分</p><p>​            return {//例子</p><p>​                filterCard:false,//不用弃牌</p><pre><code>selectCard:0, //弃牌数为零</code></pre><p>​                viewAs:{name:links[0][2]},//视为你使用你选择的牌</p><p>​            };</p><p>​        },</p><p>​        prompt:function(links,player){ //选择时弹出的提示</p><p>​            return ‘请选择’+get.translation(links[0][2])+’的目标’;</p><p>​            //例子，弹出提示：选择你选择的牌的目标</p><p>​        },</p><p>​    },</p><p><strong>4.AI：</strong></p><p> (注：可接视为框架、主动框架或触发框架)</p><p> (注2：这部分我不是很熟悉，所以只能简单地说一下)</p><p>​    基本框架：</p><p>​    ai:{ </p><p>​        save:true, //此技能可以用于自救</p><p>​        respondTao:true, //此技能可以用于救人，一般用于视为技</p><p>​        respondShan:true,//此技能可以响应杀，一般用于视为技</p><p>​        respondSha:true, //此技能可以响应闪，一般用于视为技</p><p>​        order:8, //ai发动技能的优先度</p><p>​        /*比什么先：</p><p>​         order:function(){//例子，比打出杀的优先度高1</p><p>​             return get.order({name:’sha’})+1;</p><p>​         },</p><p>​        */</p><p>​        expose:0.2, //发动技能是身份暴露度（0~1，相当于概率）</p><p>​        maixie:true, //卖血技</p><p>​        threaten:0.5,//嘲讽值</p><p>​        result:{//主动技专属</p><p>​            target:function(player,target){//ai如何选择目标</p><p>​                                    //返回负，选敌人，返回正，选队友</p><p>​                                    //没有返回值则不选</p><p>​                                    //写了这个就不用写player:function(player){}了</p><p>​                                    //因为player可以在这里进行判断</p><p>​                If(player.hp&gt;2) return -1;//例子，玩家体力大于2时，发动技能并选择敌人</p><p>​            },</p><p>​            player:function(player){//ai是否发动此技能，返回正，发动，否则不发动</p><p>​                if(player. countCards(‘h’)&lt;2) return 1;//例子，玩家手牌数小于2时，发动                },</p><p>​        },</p><p>​        effect:{//影响ai出牌（例如什么时候不出杀）等</p><p>​              //没有深入研究，不讲</p><p>​        },</p><p>​        skillTagFilter:function(player){//视为技专属，ai什么时候可以发动视为技</p><p>​            player.countCards(‘h’,{type:’basic’})&gt;0;//例子，手牌中有基本牌时，ai发动技能</p><p>​        },</p><p>​    },</p><p><strong>5.标记：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    marktext:”状”,//标记显示文本，一般为一个字</p><p>​    locked:true,//是否实时更新</p><p>​    intro:{</p><p>​        content:’cards’,// 标记显示内容，为cards时显示标记内的牌</p><p>​        /*标记显示内容为文本写法：</p><p>​        content:function (storage,player,skill){//返回值（文本）即为标记显示内容</p><p>​            return ‘当前有’+storage+’个标记’//标记显示内容为当前有多少个标记</p><p>​        },*/</p><p>​    },</p><p>​    mark:true,//获得技能时是否显示此标记，若为false，可以用markSkill()来显示此标记</p><p><strong>6.获得技能和失去技能时：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    init:function (player){//获得技能时发动</p><p>​        player.gainMaxHp();//例子，获得此技能时，玩家增加一点最大体力</p><p>​    },</p><p>​    onremove:function(player){//失去技能时发动</p><p>​        player.loseMaxHp();//例子，失去此技能时，玩家失去一点最大体力</p><p>​    },</p><p><strong>7.技能组与子技能：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    group:[“mashu”],//技能组，拥有这个技能时相当于拥有技能组内的技能</p><p>​    subSkill:{//子技能，你不会拥有写在这里面的技能，可以调用，可以用技能组联系起来</p><p>​        “子技能”:{//子技能名字:“主技能_子技能”，翻译为主技能翻译</p><p>​            //技能内容</p><p>​        },</p><p>​    },</p><p><strong>8.mod类锁定技：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    mod:{</p><p>​        globalFrom:function(from,to,distance){</p><p>​            return distance-1; //例子，进攻距离+1</p><p>​        },//from：玩家；to：目标；distance：进攻距离</p><p>​        globalTo:function(from,to,distance){</p><p>​            return distance+1; //例子，防御距离+1</p><p>​        },// to：玩家；from：目标；distance：防御距离</p><p>​        maxHandcard:function (player,num){</p><p>​           return num+1; //例子，手牌上限+1</p><p>​        },// player：玩家；num：手牌上限</p><p>​        targetEnabled:function(card,player,target){</p><p>​            if(player.sex==’male’) return false; //例子，你不能成为男性角色的牌的目标</p><p>​        },// card：牌；player：使用牌的角色；target：玩家</p><p>​        selectTarget:function (card,player,range){</p><p>​            if(card.name==’sha’) range[1]+=1; //例子，你的杀可以额外选择一名角色</p><p>​        },// card：牌；player：玩家；range[1]：目标个数; range：不清楚</p><p>​        targetInRange:function(card,player, target){</p><p>​            if(card.name==’sha’) return true;//例子，你使用的杀可以指定所有角色</p><p>​        },// card：牌；player：玩家；target：目标</p><p>​        cardDiscardable:function(card,player){</p><p>​            if(card.name==’sha’) return false; //例子，你无法弃置杀</p><p>​        },// card：牌；player：玩家</p><p>​        cardEnabled:function(card,player){//要与cardUsable一起使用</p><p>​            if(get.suit(card)==’heart’) return false;//例子：你无法使用红桃牌</p><p>​        },// card：牌；player：玩家</p><p>​        cardUsable:function(card,player){ //要与cardEnabled一起使用</p><p>​            if(get.suit(card)==’heart’) return false; //例子：你无法使用红桃牌</p><p>​        },// card：牌；player：玩家</p><p>​        cardRespondable:function(card,player){</p><p>​            if(get.suit(card)==’heart’) return false; //例子：你无法使用红桃牌来响应</p><p>​        },// card：牌；player：玩家</p><p>​        cardSavable:function(card,player){</p><p>​            if(get.suit(card)==’heart’) return false; //例子：你无法使用红桃牌来救人</p><p>​        },// card：牌；player：玩家</p><p>​        /*后4种卡牌禁言类mod技与视为技冲突的解决方法：</p><p>​         判定内加入_status.event.skill!=’冲突视为技’</p><p>​         意思为你无法使用牌，除非使用这个视为技视为无法使用的牌</p><p>​        */</p><p>​    },</p><p><strong>9.配音的添加：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    //数字为配音数量，从1开始</p><p>​    //配音命名方法：技能名+这是第几个配音</p><p>​    audio:2,//使用无名杀目录\audio\skill内的配音</p><p>​    audio:”ext:扩展名:1”,//使用无名杀录目\extension \扩展名内的配音</p><p><strong>10.主公技：</strong></p><p>(注：可接视为框架、主动框架或触发框架)</p><p>​    基本框架：</p><p>​    zhuSkill:true,//将这个技能设置为主公技</p><p><strong>11.全局技能：</strong></p><p>(注：可接视为框架、主动框架或触发框架) </p><p>(注：无论是否拥有此技能，此技能都为全局技能写法：技能名前+_) </p><p>​    基本框架：</p><p>​    global:’技能’,你用有此技能时，所有角色拥有技能（global的值）</p><p><strong>12.触发内容分步：</strong></p><p>(注：写在触发内容中) </p><p>​    基本框架：</p><p>​    ‘step 0’</p><p>​    //此步骤触发的内容</p><p>​    ‘step 1’</p><p>​    //此步骤触发的内容</p><p><strong>与步骤有关的函数：</strong></p><p>(1)evevt.finish() 触发后步骤不再往下走，终止于evevt.finish()所在步骤</p><p>(2)event.goto(num) num为步骤数，返回第几步</p><p>(3)event.redo() 重新执行这个步骤</p><p><strong>注意：</strong></p><p>(1)引号要相同，不要’step 0’ “step 1”</p><p>(2)使用与步骤有关的函数，这个步骤依旧会进行到底</p><p>(3)var定义的东西不能在步骤中传递，可以储存到evevt中</p><p>(4)函数的result元素可以在相邻的步骤中传递</p><p>(5)步骤必须从0开始</p><p>(6)step和数字之间有一个空格，word文档中不易看出来</p><p><strong>例子：</strong></p><p>​    “step 0”//步骤0</p><p>​    player.chooseTarget(‘请选择一名角色’,function(card,player,target){</p><p>​        return player!=target;</p><p>​    }).ai=function(target){</p><p>​        return get.attitude(player,target);//告诉ai选择队友</p><p>​    };//选择一名其他角色</p><p>​    “step 1”//步骤1</p><p>​    if(result.bool){//如果有选择角色</p><p>​        event.target=result.targets[0]; //将选择的角色储存到event.target中</p><p>​        player.chooseCard(‘请选择给予牌’,2,’h’).set(‘ai’,function(card){</p><p>​            return 1;//告诉ai可以选择所有手牌</p><p>​        });//选择两张手牌</p><p>​    }else{//否则</p><p>​        event.finish();//步骤将于这里终止</p><p>​    };</p><p>​    “step 2”//步骤2</p><p>​    if(result.bool){ //如果有选择手牌</p><p>​        player.$give(result.cards.length,event.target);</p><p>​        event.target.gain(result.cards,player);//被选择的角色获得这两张牌</p><p>​    };</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;无名杀技能编写教程&quot;&gt;&lt;a href=&quot;#无名杀技能编写教程&quot; class=&quot;headerlink&quot; title=&quot;无名杀技能编写教程&quot;&gt;&lt;/a&gt;无名杀技能编写教程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    (1)每写一个对象
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>技能编写教程-纱雾</title>
    <link href="https://wisdows.github.io/2019/11/16/%E6%8A%80%E8%83%BD%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E7%BA%B1%E9%9B%BE/"/>
    <id>https://wisdows.github.io/2019/11/16/%E6%8A%80%E8%83%BD%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E7%BA%B1%E9%9B%BE/</id>
    <published>2019-11-15T19:32:22.135Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>那些大佬的教程应该都已经很详细了，再加上楼主比较萌新，故此帖可当做水贴对待。不过虽然这贴和楼主都比较水，但是走过路过的好心人也要假装支持一下哦<br>下面从应用最广的触发技开始介绍<br>一：触发技<br>这是最常见的技能，并且几乎所有技能效果都能通过这个技能解决，基本思路是：判断角色是否能发动这个技能→游戏进行到某一个时机→符合这个技能发动所需的时机→执行技能的内容<br>①基本框架：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">skill={</span><br><span class="line">xxx:xxx,</span><br><span class="line"><span class="comment">//详细介绍参考注释一</span></span><br><span class="line">trigger:{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释二</span></span><br><span class="line">},</span><br><span class="line">filter:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释三</span></span><br><span class="line">},</span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释四</span></span><br><span class="line">},</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释五</span></span><br><span class="line">},</span><br><span class="line">ai:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释六</span></span><br><span class="line">},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>②注释<br>注释一：此处可添加一些辅助功能，对技能的触发时机、触发内容无影响。<br>常见的有：<br>audio:2,<br>//添加配音，若想要配音正常触发，需要满足以下两个条件：Ⅰ配音需存在于该拓展文件夹或游戏自带的配音文件夹中，且格式不为.wav（经部分吧友实验.wav无法播放，未经楼主亲自检验）Ⅱ这个配音名称需要改为 技能名称+数字 形式，如给技能abc添加配音，则配音应重命名成abc1.mp3，给技能abc123添加配音，则配音应重命名成abc1231<br>priority:999,<br>//技能释放的优先程度为999，该数值越大，技能释放的优先程度越高，可为null，无穷大为Infinity，无穷小为-Infinity（字母中的I需大写，且仅有I需大写）<br>forced:true,<br>//该触发技是否满足条件就强制释放。若为true则强制，false则非强制<br>unique:true,<br>//该技能是否为特殊技能，即左慈化身能否获取等等，常与部分锁定技、主公技、觉醒技连用<br>ZhuSkill:true,<br>//是否为主公技<br>mark:true,<br>//是否标记，常和intro连用<br>skillAnimation:true<br>animationStr:’xx’<br>animationColor:’xx’<br>//第一行表示是否有技能动画，第二行表示动画显示的字符，第三行表示动画的颜色（虽然没看出来有什么区别）<br>noremove:true,<br>//不能被移除，需要和ai中语句连用<br>其余常见的可以参考极光大佬的教程（再写下去我的坑填不完了。。）<br>注释二：此处添加的是时机，即什么时候触发该技能<br>一般为global:’xxx’,<br>或者player:’xxx’,<br>常见的还有source:’xxx’和target:’xxx’<br>global为全场角色，player为拥有该技能的玩家，source为来源是你（如你造成伤害时），xxx为时机，很多时机可以用事件+过程英文组合的方式组合而成，如phaseDrawAfter便是摸牌阶段之后，其中phase表示回合或者阶段Draw表示抽卡After表示之后，damageBegin就是受伤开始过程，其中damage表示受伤或造成伤害，Begin表示开始<br>当有两个及以上的时点可以触发该技能时，时机需写成技能组格式，如player:[‘phaseBegin’,’damageBefore’]<br>当有多个时点且触发对象不同时，分别写出这些触发对象和相应的时点，再用逗号隔开，如trigger:{<br>player:’removeSkillBefore’,<br>global:[‘phaseBefore’,’gainEnd’],<br>source:’damageBefore’,<br>},<br>除此之外，有一些特殊的时点，可以不需要加过程的英文，可以直接用事件代替时点，如player:’damage’或player:’respond’<br>注释三：此处填写技能释放的条件，当条件true时，技能可以释放，当条件为false时，技能不能被释放。条件的true或false由return判断<br>如：fliter:function(){<br>if (player.hp&gt;3) return false;<br>return true<br>},<br>//该技能在玩家体力＞3时无法发动<br>此外，如果只有可以发动的条件，可以直接return加上可以发动的条件，发动条件中，如 return player.hp&gt;3表示只有在玩家体力＞3时才可发动。<br>此外，符号&amp;&amp;表示和，如条件a&amp;条件b表示需要同时满足条件a和条件b才能发动，符号||表示或，如条件a||条件b，表示只要满足条件a和b中任意一个即可发动。(&amp;&amp;在有些情况下也可写作&amp;，||同理)当直接return多个条件时，条件需要加括号，如<br>filter:function(){<br>return (player.isIn&amp;&amp;player.isAlive)<br>},<br>//当玩家未被移出游戏且玩家存活时可发动<br>此外，filter:function(){}还可以用来限制选择的目标，此时函数可写为filter加选择的对象英文:function(){}，如<br>filterTarget:function(){<br>return target.isAlive()<br>},<br>//限制选择的目标角色，只有目标角色存活时才能发动<br>filterCard:function(){<br>return true<br>},<br>//限制选择的卡，任意卡均可选择<br>当然，在filter:function()括号中添加参数，也是可以实现上述目标的，不过在这里不详细介绍了，不然这坑填不完了<br>注释四：该部分为技能内容，各类代码效果请查看game.js或我之前开的一个代码效果整理帖（不过这个帖子不全），此外，有一点要注意，当代码中出现未定义的函数时，技能效果只执行到该函数的上一个语句，之后则不执行，如<br>player.draw();<br>player.abcdefg();<br>player.damage();<br>当这些代码同时出现在content:function中时，只执行摸牌效果，而之后的受到伤害的效果则不执行<br>这个部分应该是大佬们讲的最多最详细的部分，所以我在这里就不啰嗦了<br>注释五：该函数为获得技能时，若满足技能需求，则立刻获得的效果，常用于判断是否有同样武将或者初始获得的标记，也有时候用于重写或定义函数<br>例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> init:<span class="function"><span class="keyword">function</span> (<span class="params">player</span>)</span>{</span><br><span class="line"> player.storage.niepan=<span class="literal">false</span>;</span><br><span class="line"> },</span><br><span class="line"><span class="comment">//涅槃技能未发动</span></span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params">player</span>)</span>{</span><br><span class="line"><span class="keyword">if</span> (!game.cmpName(player, <span class="string">'dan_kamukura'</span>)) {</span><br><span class="line">player.clearSkills();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> tp;</span><br><span class="line"><span class="keyword">var</span> notonly = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(player.name2){</span><br><span class="line">notonly = <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; game.players.length; i++) {</span><br><span class="line">tp = game.players[i];</span><br><span class="line"><span class="keyword">if</span> (tp == player) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (tp.isKamukura) {</span><br><span class="line">notonly = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (notonly) {</span><br><span class="line">player.reinit(<span class="string">'dan_kamukura'</span>,<span class="string">'dan_rixianga'</span>);</span><br><span class="line">player.hp = player.maxHp;</span><br><span class="line">}</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>//获得此技能时，先判断该技能所有者名字是否满足game.CMPname函数（即判断名字是否为神座出流），若否玩家清空所有技能，然后，判断场上的角色是否有同名的角色，若有则按站场顺序变为日向创（对方先在场上则自己变为日向创，自己先在场上则对方变为日向创），如果在国战或双将模式，自己变为日向创<br>注释六：用来告诉ai是否发动技能，发动技能的对象等等，ai这块在无名杀教程手册（可乐大佬的教程）中较为完善的阐述了，而且触发技基本不需要ai，所以这块先跳过，在其他种类技能里会讲到<br>至此，触发技完结，撒花<br>二：主动技<br>这是另一类常见技能，该类技能需要手动选择是否发动。此外，这也是需要一定ai技术的技能，若该类技能不添加ai，则ai基本不会发动此类技能<br>①基本框架：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">skill={</span><br><span class="line">xxx:xxx,</span><br><span class="line"><span class="comment">//详细介绍参考注释七</span></span><br><span class="line">enable:<span class="string">'xxx'</span>,</span><br><span class="line"><span class="comment">//详细介绍参考注释八</span></span><br><span class="line">filter:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释三</span></span><br><span class="line">},</span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释四</span></span><br><span class="line">},</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释五</span></span><br><span class="line">},</span><br><span class="line">ai:<span class="function"><span class="keyword">function</span>(<span class="params">xxx</span>)</span>{</span><br><span class="line">xxxxxxxxx;</span><br><span class="line"><span class="comment">//详细介绍参考注释六、注释九</span></span><br><span class="line">},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注释七：这里也是可以添加一些辅助的功能的，如动画之类<br>usable:x,<br>//该技能在一回合内最多使用n次，若技能在结算前被自己/其他角色的技能取消，则不计入使用次数<br>popup:true,<br>//使用该技能的时候是否在武将上弹出该技能名称<br>selectCard:x,<br>//选择x张卡才能发动，常和check:function(){return xxx}(告诉ai如何选牌)和position:’xx’（可以选择什么位置的牌，如’h’则为手牌）连用<br>这块大佬也讲过很多了，作为一只萌新我就简略一点了<br>注释八：这里填写的也是技能可发动的时机，命名规则和触发技相同，但是主动技特殊的点在于：如果你命名的时点是你不能够操控角色的阶段，即自动进行的，则该技能无法发动<br>例1：如设置的时机为enable:’phaseJudge’，则若你的判定区内没有牌时，判定阶段不会询问是否发动该技能，你直接通过判定阶段进入摸牌阶段以及之后的阶段，若你的判定区有牌，则你可以在判定过程中选择发动此技能<br>例2：如你设置的时机为enable:’chooseToUse’，则你可以在任意你可以操控角色的阶段释放此技能，若场上所有人都没有关于弃牌阶段结算的技能，则该技能也无法释放</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;那些大佬的教程应该都已经很详细了，再加上楼主比较萌新，故此帖可当做水贴对待。不过虽然这贴和楼主都比较水，但是走过路过的好心人也要假装支持一下哦&lt;br&gt;下面从应用最广的触发技开始介绍&lt;br&gt;一：触发技&lt;br&gt;这是最常见的技能，并且几乎所有技能效果都能通过这个技能解决，基本思路
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>扩展编写教程-水乎</title>
    <link href="https://wisdows.github.io/2019/11/16/%E6%89%A9%E5%B1%95%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E6%B0%B4%E4%B9%8E/"/>
    <id>https://wisdows.github.io/2019/11/16/%E6%89%A9%E5%B1%95%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B-%E6%B0%B4%E4%B9%8E/</id>
    <published>2019-11-15T19:32:22.131Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="水乎无名杀教程"><a href="#水乎无名杀教程" class="headerlink" title="水乎无名杀教程"></a>水乎无名杀教程</h2><h3 id="1-扩展的基本格式"><a href="#1-扩展的基本格式" class="headerlink" title="1. 扩展的基本格式"></a>1. 扩展的基本格式</h3><p>扩展为zip格式，包含extension.js</p><p>extension.js的格式：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">game.import(<span class="string">'extension'</span>,{</span><br><span class="line"></span><br><span class="line">name:<span class="string">'扩展名称'</span>,</span><br><span class="line"></span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展内容</span></span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">image:[<span class="string">'xxx.png'</span>,<span class="string">'xxx.png'</span>],<span class="comment">//扩展包内所有图片名</span></span><br><span class="line"></span><br><span class="line">config:{</span><br><span class="line"></span><br><span class="line"><span class="comment">//在扩展界面提供的选项，作为content函数的参数</span></span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">help:{</span><br><span class="line"></span><br><span class="line"><span class="comment">//帮助界面中显示的内容</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="2-content函数"><a href="#2-content函数" class="headerlink" title="2. content函数"></a>2. content函数</h3><p>content函数调用时机为游戏最初载入时，可用来修改游戏本身的内容。</p><p>若要修改现有的武将或卡牌的内容，须等扩展载入完毕后再触发，写法如下</p><p>lib.arenaReady.push(function(){</p><p>//要执行的内容</p><p>})</p><h3 id="3-添加武将"><a href="#3-添加武将" class="headerlink" title="3. 添加武将"></a>3. 添加武将</h3><p>通过扩展添加的武将与武将包有部分区别，它的管理方式与自带武将相同，可自由决定放在哪个现有武将包（或创建新武将包）</p><p>示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">name:<span class="string">'xxx'</span>,</span><br><span class="line"></span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(config.x_caocao){</span><br><span class="line"></span><br><span class="line">lib.character.x_caocao=[<span class="string">'male'</span>,<span class="string">'wei'</span>,<span class="number">4</span>,[<span class="string">'x_jianxiong'</span>],[<span class="string">'db:extension-xxx:x_caocao.jpg'</span>,<span class="string">'zhu'</span>]]</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">lib.translate.x_caocao=<span class="string">'曹操'</span>;</span><br><span class="line"></span><br><span class="line">lib.skill.x_jianxiong={</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义技能</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dlib.translate.x_jianxiong=<span class="string">'奸雄'</span>;</span><br><span class="line"></span><br><span class="line">lib.translate.x_jianxiong_info=<span class="string">'技能描述'</span>;</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">image:[<span class="string">'x_caocao.jpg'</span>],</span><br><span class="line"></span><br><span class="line">config:{</span><br><span class="line"></span><br><span class="line">x_caocao:{</span><br><span class="line"></span><br><span class="line">name:<span class="string">'启用曹操'</span>,</span><br><span class="line"></span><br><span class="line">init:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中</p><p>‘db:extension-xxx:x_caocao.jpg’表示武将图为导入的图片</p><p>‘zhu’表示这是一个常备主公</p><p>config里表示在扩展界面加一个选项（即content中的config.x_caocao），init:true表示这个选项默认为true</p><h4 id="3-1-将武将放入一个扩展包"><a href="#3-1-将武将放入一个扩展包" class="headerlink" title="3.1 将武将放入一个扩展包"></a>3.1 将武将放入一个扩展包</h4><h5 id="3-1-1创建一个新武将包"><a href="#3-1-1创建一个新武将包" class="headerlink" title="3.1.1创建一个新武将包"></a>3.1.1创建一个新武将包</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> caocao=[<span class="string">'male'</span>,<span class="string">'wei'</span>,<span class="number">4</span>,[<span class="string">'x_jianxiong'</span>],[<span class="string">'db:extension-xxx:x_caocao.jpg'</span>,<span class="string">'zhu'</span>]];</span><br><span class="line"></span><br><span class="line">lib.character.x_caocao=caocao;</span><br><span class="line"></span><br><span class="line">lib.characterPack.mode_extension_xxx={<span class="attr">x_caocao</span>:caocao};</span><br><span class="line"></span><br><span class="line">lib.translate.mode_extension_xxx_character_config=<span class="string">'示例'</span>;</span><br></pre></td></tr></tbody></table></figure><p>mode_前缀代表这是一个由扩展创建的武将包，不能在武将页面关闭 </p><h5 id="3-1-2放入一个现有的武将包中"><a href="#3-1-2放入一个现有的武将包中" class="headerlink" title="3.1.2放入一个现有的武将包中"></a>3.1.2放入一个现有的武将包中</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lib.packageReady.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//将武将放入标准包</span></span><br><span class="line"></span><br><span class="line">lib.characterPack.standard.x_caocao=lib.character.x_caocao</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>packageReady发动时机为扩展载入完毕，界面创建之前</p><p>arenaReady发动时机为界面创建完毕</p><p>由于创建菜单时用到了武将包，所以修改现有武将包的时机为界面创建之前，即packageReady</p><h4 id="3-2-武将的其它设置"><a href="#3-2-武将的其它设置" class="headerlink" title="3.2 武将的其它设置"></a>3.2 武将的其它设置</h4><p>设为boss：lib.character.x_caocao=[‘male’,’wei’,4,[‘x_jianxiong’],[‘db:extension-xxx:x_caocao.jpg’,’zhu’,’boss’]]</p><p>设为boss且可在正常模式中出现：lib.character.x_caocao=[‘male’,’wei’,4,[‘x_jianxiong’],[‘db:extension-xxx:x_caocao.jpg’,’zhu’,’boss’,’bossallowed’]]</p><p>设置ai禁选：lib.config.forbidai.push(‘x_caocao’)</p><p>设置双将禁选：lib.config.forbiddouble.push(‘x_caocao’)</p><p>设置武将强度</p><p>（影响部分ai，屏蔽弱将时不出现c及以下的武将，屏蔽强将时不出现ap及以上的武将）</p><p>强度分为9个等级：s&gt;ap&gt;a&gt;am&gt;bp&gt;b&gt;bm&gt;c&gt;d</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lib.arenaReady.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">lib.rank.s.push(<span class="string">'x_caocao'</span>);<span class="comment">//将强度设为S级</span></span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>设置珠联壁合：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lib.arenaReady.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!lib.perfectPair.x_caocao) lib.perfectPair.x_caocao=[];</span><br><span class="line"></span><br><span class="line">lib.perfectPair.x_caocao.push(<span class="string">'dianwei'</span>);<span class="comment">//设置与典韦珠联壁合</span></span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="3-3-添加武将的简便写法"><a href="#3-3-添加武将的简便写法" class="headerlink" title="3.3 添加武将的简便写法"></a>3.3 添加武将的简便写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">game.addCharacter(<span class="string">'x_caoca'</span>,{</span><br><span class="line"></span><br><span class="line">sex:<span class="string">'male'</span>,</span><br><span class="line"></span><br><span class="line">translate:<span class="string">'曹操'</span>,</span><br><span class="line"></span><br><span class="line">skills:[<span class="string">'x_jianxiong'</span>],</span><br><span class="line"></span><br><span class="line">tags:[<span class="string">'zhu'</span>]</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>等价于</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> caocao=[<span class="string">'male'</span>,<span class="string">'wei'</span>,<span class="number">4</span>,[<span class="string">'x_jianxiong'</span>],[<span class="string">'db:extension-xxx:x_caocao.jpg'</span>,<span class="string">'zhu'</span>]];</span><br><span class="line"></span><br><span class="line">lib.character.x_caocao=caocao;</span><br><span class="line"></span><br><span class="line">lib.translate.x_caocao=<span class="string">'曹操'</span>;</span><br><span class="line"></span><br><span class="line">lib.characterPack.mode_extension_xxx={<span class="attr">x_caocao</span>:caocao};</span><br><span class="line"></span><br><span class="line">lib.translate.mode_extension_xxx_character_config=<span class="string">'xxx'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="4-添加卡牌"><a href="#4-添加卡牌" class="headerlink" title="4. 添加卡牌"></a>4. 添加卡牌</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">lib.card.yuanshengfazhang={</span><br><span class="line"></span><br><span class="line">fullimage:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">image:<span class="string">'db:extension-示例扩展:yuanshengfazhang.jpg'</span>,</span><br><span class="line"></span><br><span class="line">enable:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">type:<span class="string">'trick'</span>,</span><br><span class="line"></span><br><span class="line">filterTarget:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">target.damage(<span class="string">'thunder'</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">lib.translate.yuanshengfazhang=<span class="string">'原生法杖'</span>;</span><br><span class="line"></span><br><span class="line">lib.translate.yuanshengfazhang_info=<span class="string">'造成1点雷电伤害'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n=<span class="built_in">parseInt</span>(config.yuanshengfazhang);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--){</span><br><span class="line"></span><br><span class="line">lib.card.list.push([<span class="string">'club'</span>,<span class="number">3</span>,<span class="string">'yuanshengfazhang'</span>]);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">lib.cardPack.mode_extension_example=[<span class="string">'yuanshengfazhang'</span>];</span><br><span class="line"></span><br><span class="line">lib.translate.mode_extension_example_card_config=<span class="string">'示例'</span>;</span><br></pre></td></tr></tbody></table></figure><p>等价写法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">game.addCard(<span class="string">'yuanshengfazhang'</span>,{</span><br><span class="line"></span><br><span class="line">fullimage:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">enable:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">type:<span class="string">'trick'</span>,</span><br><span class="line"></span><br><span class="line">filterTarget:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">target.damage(<span class="string">'thunder'</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">translate:<span class="string">'原生法杖'</span>,</span><br><span class="line"></span><br><span class="line">description:<span class="string">'造成1点雷电伤害'</span>,</span><br><span class="line"></span><br><span class="line">number:<span class="built_in">parseInt</span>(config.yuanshengfazhang)</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>fullskin（左）与fullimage（右）</p><h3 id="5-创建模式"><a href="#5-创建模式" class="headerlink" title="5. 创建模式"></a>5. 创建模式</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">name:<span class="string">'新模式'</span>,</span><br><span class="line"></span><br><span class="line">content:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>{</span><br><span class="line"></span><br><span class="line">game.addMode(<span class="string">'xxmode'</span>,{</span><br><span class="line"></span><br><span class="line"><span class="comment">//模式内容</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">},{</span><br><span class="line"></span><br><span class="line">translate:<span class="string">'新模式'</span>,</span><br><span class="line"></span><br><span class="line">config:{</span><br><span class="line"></span><br><span class="line">xxx:{</span><br><span class="line"></span><br><span class="line">name:<span class="string">'一个选项'</span>,</span><br><span class="line"></span><br><span class="line">init:<span class="string">'a'</span>,</span><br><span class="line"></span><br><span class="line">item:{</span><br><span class="line"></span><br><span class="line">a:<span class="string">'A'</span>,</span><br><span class="line"></span><br><span class="line">b:<span class="string">'B'</span>,</span><br><span class="line"></span><br><span class="line">c:<span class="string">'C'</span></span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">frequent:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">restart:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">help:{</span><br><span class="line"></span><br><span class="line"><span class="string">'新模式'</span>:<span class="string">'帮助内容'</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">onremove:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">game.clearModeConfig(<span class="string">'xxmode'</span>);},</span><br><span class="line"></span><br><span class="line">image:[<span class="string">'xxmode.jpg'</span>]</span><br></pre></td></tr></tbody></table></figure><p>其中</p><p>image应包含与模式同名的图片（即xxmode.jpg），用于在开始界面显示</p><p>config为模式选择菜单中的选项，不是扩展菜单中的选项</p><p>onremove为此扩展被删除时的操作，模式添加的选项需手动删除（clearModeConfig）</p><h5 id="5-1-载入现有模式的内容"><a href="#5-1-载入现有模式的内容" class="headerlink" title="5.1 载入现有模式的内容"></a>5.1 载入现有模式的内容</h5> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'step 0'</span></span><br><span class="line"></span><br><span class="line">game.loadMode(<span class="string">'identity'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">'step 1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> result.ai.get){</span><br><span class="line"></span><br><span class="line">ai.get[i]=result.ai.get[i];</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//引用身份模式的ai</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-9写法改变："><a href="#1-9写法改变：" class="headerlink" title="1.9写法改变："></a>1.9写法改变：</h3><ol><li><p>添加/移除技能必须使用addSkill/removeSkill或addAdditionalSkill/removeAdditionalSkill函数</p></li><li><p>添加/移除全局技能必须使用addGlobalSkill/removeGlobalSkill函数</p></li><li><p>禁用/启用技能必须使用disableSkill/enableSkill函数</p></li><li><p>检查是否有某技能必须使用hasSkill函数</p></li><li><p>装备不再能直能通过appendChild函数添加，也不再能通过remove函数移除</p></li><li><p>使用createEvent创建事件，事件的content必须用setContent添加</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;水乎无名杀教程&quot;&gt;&lt;a href=&quot;#水乎无名杀教程&quot; class=&quot;headerlink&quot; title=&quot;水乎无名杀教程&quot;&gt;&lt;/a&gt;水乎无名杀教程&lt;/h2&gt;&lt;h3 id=&quot;1-扩展的基本格式&quot;&gt;&lt;a href=&quot;#1-扩展的基本格式&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://wisdows.github.io/2019/11/16/MongoDB/"/>
    <id>https://wisdows.github.io/2019/11/16/MongoDB/</id>
    <published>2019-11-15T19:32:22.125Z</published>
    <updated>2019-09-12T03:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p><strong>Module</strong>: <a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">mongodb</a></p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongodb</span><br></pre></td></tr></tbody></table></figure><h3 id="Example-v2"><a href="#Example-v2" class="headerlink" title="Example (v2.*)"></a>Example (v2.*)</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient </span><br><span class="line"><span class="comment">//引用插件mongodb的MongoClient方法</span></span><br><span class="line"></span><br><span class="line">MongoClient.connect(<span class="string">'mongodb://localhost:27017/animals'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, db</span>) </span>{</span><br><span class="line"> <span class="comment">//使用mongodb的MongoClient方法，connect连接到mongodb里的一个animals数据库</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"><span class="comment">//如果错误就提示</span></span><br><span class="line">    </span><br><span class="line">  db.collection(<span class="string">'mammals'</span>).find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>{    </span><br><span class="line">      <span class="comment">//执行结果，查找mammals集合，并find（）显示出来，以array组形式</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"><span class="comment">//如果错误就提示</span></span><br><span class="line">      </span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">     <span class="comment">//控制台打印</span></span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="Example-v3"><a href="#Example-v3" class="headerlink" title="Example (v3.*)"></a>Example (v3.*)</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient</span><br><span class="line"><span class="comment">//引用插件mongodb的MongoClient方法</span></span><br><span class="line"></span><br><span class="line">MongoClient.connect(<span class="string">'mongodb://localhost:27017/animals'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, client</span>) </span>{</span><br><span class="line">  <span class="comment">//使用mongodb的MongoClient方法，connect连接到mongodb里的一个animals数据库</span></span><br><span class="line">  <span class="comment">//client客户端</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"><span class="comment">//如果错误就提示</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">var</span> db = client.db(<span class="string">'animals'</span>)</span><br><span class="line">   <span class="comment">//db等于client客户端，(v3.*)新版本加的</span></span><br><span class="line">  </span><br><span class="line">  db.collection(<span class="string">'mammals'</span>).find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>{</span><br><span class="line">  <span class="comment">//执行结果，查找mammals集合，并find（）显示出来，以array组形式</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="comment">//如果错误就提示</span></span><br><span class="line">      </span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="comment">//控制台打印</span></span><br><span class="line">  })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>If you want an object model driver for MongoDB, look at <a href="https://github.com/LearnBoost/mongoose" target="_blank" rel="noopener">Mongoose</a>.</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>Node.js 的官方<a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>驱动程序。在<a href="https://www.npmjs.com/package/mongodb-core" target="_blank" rel="noopener">mongodb-core</a>之上提供高级API ，适用于最终用户。</p><p><strong>注意：最近发布了v3.x，其中包含重大的API更改。您可以在此处找到更改列表。</strong></p><h2 id="MongoDB-Node-JS驱动程序"><a href="#MongoDB-Node-JS驱动程序" class="headerlink" title="MongoDB Node.JS驱动程序"></a>MongoDB Node.JS驱动程序</h2><table><thead><tr><th>什么</th><th>哪里</th></tr></thead><tbody><tr><td>文件</td><td><a href="http://mongodb.github.io/node-mongodb-native" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native</a></td></tr><tr><td>API-DOC</td><td><a href="http://mongodb.github.io/node-mongodb-native/3.1/api" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/3.1/api</a></td></tr><tr><td>资源</td><td><a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">https://github.com/mongodb/node-mongodb-native</a></td></tr><tr><td>MongoDB的</td><td><a href="http://www.mongodb.org/" target="_blank" rel="noopener">http://www.mongodb.org</a></td></tr></tbody></table><h3 id="错误-功能请求"><a href="#错误-功能请求" class="headerlink" title="错误/功能请求"></a>错误/功能请求</h3><p>认为你发现了一个错误？想要看到新功能<code>node-mongodb-native</code>吗？请在我们的问题管理工具JIRA中打开一个案例：</p><ul><li>创建一个帐户并登录<a href="https://jira.mongodb.org/" target="_blank" rel="noopener">jira.mongodb.org</a>。</li><li>导航到NODE项目<a href="https://jira.mongodb.org/browse/NODE" target="_blank" rel="noopener">jira.mongodb.org/browse/NODE</a>。</li><li>单击“ <strong>创建问题”</strong> - 请提供尽可能多的有关问题类型以及如何重现问题的信息。</li></ul><p>JIRA中针对所有驱动程序项目（即NODE，PYTHON，CSHARP，JAVA）和核心服务器（即SERVER）项目的错误报告都是<strong>公开的</strong>。</p><h3 id="支持-反馈"><a href="#支持-反馈" class="headerlink" title="支持/反馈"></a>支持/反馈</h3><p>有关Node.js驱动程序的问题，疑问或反馈，请查看我们的<a href="http://www.mongodb.org/about/support" target="_blank" rel="noopener">支持渠道</a>。请不要直接向任何驱动程序开发人员发送问题或问题 - 您更有可能在Google网上论坛的<a href="http://groups.google.com/group/mongodb-user>" target="_blank" rel="noopener">mongodb用户</a>列表中获得答案。</p><h3 id="更改日志"><a href="#更改日志" class="headerlink" title="更改日志"></a>更改日志</h3><p>可以在中找到更改历史记录<a href="https://github.com/mongodb/node-mongodb-native/blob/master/HISTORY.md" target="_blank" rel="noopener"><code>HISTORY.md</code></a>。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>有关版本兼容性矩阵，请参阅以下链接：</p><ul><li><a href="https://docs.mongodb.com/ecosystem/drivers/driver-compatibility-reference/#reference-compatibility-mongodb-node" target="_blank" rel="noopener">MongoDB的</a></li><li><a href="https://docs.mongodb.com/ecosystem/drivers/driver-compatibility-reference/#reference-compatibility-language-node" target="_blank" rel="noopener">的NodeJS</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>开始使用Node.js 3.0驱动程序的推荐方法是使用<code>npm</code>（节点包管理器）在项目中安装依赖项。</p><h2 id="MongoDB驱动程序"><a href="#MongoDB驱动程序" class="headerlink" title="MongoDB驱动程序"></a>MongoDB驱动程序</h2><p>鉴于您已使用<code>npm init</code>我们创建自己的项目，我们通过执行以下<code>npm</code>命令来安装MongoDB驱动程序及其依赖项。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></tbody></table></figure><p>这将下载MongoDB驱动程序并在您的<code>package.json</code>文件中添加依赖项。</p><p>您也可以使用<a href="https://yarnpkg.com/en" target="_blank" rel="noopener">Yarn</a>包管理器。</p><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>MongoDB驱动程序依赖于其他几个包。这些是：</p><ul><li><a href="https://github.com/mongodb-js/mongodb-core" target="_blank" rel="noopener">MongoDB的核心</a></li><li><a href="https://github.com/mongodb/js-bson" target="_blank" rel="noopener">BSON</a></li><li><a href="https://github.com/mongodb-js/kerberos" target="_blank" rel="noopener">Kerberos的</a></li><li><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">节点GYP</a></li></ul><p>该<code>kerberos</code>软件包是C ++扩展，需要在您的系统上安装构建环境。您必须能够自己构建Node.js才能编译和安装<code>kerberos</code>模块。此外，该<code>kerberos</code>模块需要MIT Kerberos包才能在UNIX操作系统上正确编译。有关要安装的库，请咨询UNIX操作系统包管理器。</p><p><strong>Windows已包含用于Kerberos身份验证的SSPI API。但是，您需要使用Visual Studio C ++安装完整的编译器工具链才能正确安装Kerberos扩展。</strong></p><h3 id="在UNIX上进行诊断"><a href="#在UNIX上进行诊断" class="headerlink" title="在UNIX上进行诊断"></a>在UNIX上进行诊断</h3><p>如果您没有build-essentials，则不会构建此模块。对于Linux，你需要gcc，g ++，Node.js以及所有头文件和Python。找出缺少的最简单的方法是尝试构建Kerberos项目。您可以通过执行以下步骤来执行此操作。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/mongodb-js/kerberos</span></span><br><span class="line">cd kerberos</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>如果所有步骤都已完成，则表明您已安装了正确的工具链。如果您收到错误“找不到node-gyp”，则需要<code>node-gyp</code>全局安装：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></tbody></table></figure><p>如果它正确编译并运行测试，那么你就是金色的。我们现在可以尝试<code>mongod</code>通过执行以下命令来安装驱动程序。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd yourproject</span><br><span class="line">npm install mongodb --save</span><br></pre></td></tr></tbody></table></figure><p>如果仍然失败，则下一步是检查npm日志。重新运行命令，但在这种情况下是详细模式。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --loglevel verbose install mongodb</span><br></pre></td></tr></tbody></table></figure><p>这将打印出在尝试安装模块时npm正在执行的所有步骤。</p><h3 id="在Windows上进行诊断"><a href="#在Windows上进行诊断" class="headerlink" title="在Windows上进行诊断"></a>在Windows上进行诊断</h3><p>已知可<code>kerberos</code>在Windows上进行编译的编译器工具链如下所示。</p><ul><li>Visual Studio C ++ 2010（不要使用更高版本）</li><li>Windows 7 64位SDK</li><li>Python 2.7或更高版本</li></ul><p>打开Visual Studio命令提示符。确保<code>node.exe</code>在您的路径中并安装<code>node-gyp</code>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-gyp</span><br></pre></td></tr></tbody></table></figure><p>接下来，您必须手动构建项目以进行测试。克隆存储库，安装依赖项并重建：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/christkv/kerberos.git</span></span><br><span class="line">cd kerberos</span><br><span class="line">npm install</span><br><span class="line">node-gyp rebuild</span><br></pre></td></tr></tbody></table></figure><p>如果您已正确设置所有内容，则应成功重建驱动程序。</p><h3 id="其他可能的问题"><a href="#其他可能的问题" class="headerlink" title="其他可能的问题"></a>其他可能的问题</h3><p>您的Python安装可能需要进行gyp break。首先通过尝试在有问题的服务器上构建Node.js来测试您的部署环境，因为这应该能够解决破坏软件包的任何问题（并且有很多破解的软件包）。</p><p>另一个提示是确保您的用户具有对安装Node.js模块的任何位置的写入权限。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>本指南将向您展示如何使用Node.js和MongoDB设置一个简单的应用程序。它的范围只是如何设置驱动程序和执行简单的CRUD操作。有关更深入的报道，请参阅<a href="https://github.com/mongodb/node-mongodb-native/blob/master/docs/reference/content/tutorials/main.md" target="_blank" rel="noopener">教程</a>。</p><h3 id="创建package-json文件"><a href="#创建package-json文件" class="headerlink" title="创建package.json文件"></a>创建<code>package.json</code>文件</h3><p>首先，创建一个应用程序所在的目录。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line"> cd myproject</span><br></pre></td></tr></tbody></table></figure><p>输入以下命令并回答问题以创建新项目的初始结构：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></tbody></table></figure><p>接下来，安装驱动程序依赖项。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></tbody></table></figure><p>你应该看到<strong>NPM</strong>下载了很多文件。完成后，您将在<strong>node_modules</strong>目录下找到所有下载的软件包。</p><h3 id="启动MongoDB服务器"><a href="#启动MongoDB服务器" class="headerlink" title="启动MongoDB服务器"></a>启动MongoDB服务器</h3><p>有关完整的MongoDB安装说明，请参阅<a href="https://docs.mongodb.org/manual/installation/" target="_blank" rel="noopener">手册</a>。</p><ol><li>从<a href="https://www.mongodb.org/downloads" target="_blank" rel="noopener">MongoDB</a>下载正确的MongoDB版本</li><li>创建一个数据库目录（在本例中为<strong>/ data</strong>）。</li><li>安装并启动一个<code>mongod</code>过程。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath = <span class="regexp">/ data</span></span><br></pre></td></tr></tbody></table></figure><p>您应该看到<strong>mongod</strong>进程启动并打印一些状态信息。</p><h3 id="连接到MongoDB"><a href="#连接到MongoDB" class="headerlink" title="连接到MongoDB"></a>连接到MongoDB</h3><p>创建一个新的<strong>app.js</strong>文件并添加以下代码以使用MongoDB驱动程序尝试一些基本的CRUD操作。</p><p>添加代码以连接到服务器和数据库<strong>myproject</strong>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected successfully to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  client.close();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>从命令行运行您的应用程序：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></tbody></table></figure><p>应用程序应<strong>成功将已连接</strong>打印<strong>到服务器</strong>到控制台。</p><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>向<strong>app.js</strong>添加以下函数，该函数使用<strong>insertMany</strong> 方法将三个文档添加到<strong>文档</strong>集合中。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  insertDocuments  =  <span class="function"><span class="keyword">function</span>（<span class="title">db</span>，<span class="title">callback</span>）</span>{</span><br><span class="line">   <span class="comment">//获取文档集合</span></span><br><span class="line">   <span class="keyword">const</span> collection = db.collection(<span class="string">'documents'</span>);</span><br><span class="line">  <span class="comment">//插入一些文档</span></span><br><span class="line">collection.insertMany([</span><br><span class="line">    {<span class="attr">a</span> : <span class="number">1</span>}, {<span class="attr">a</span> : <span class="number">2</span>}, {<span class="attr">a</span> : <span class="number">3</span>}</span><br><span class="line">  ], <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>{</span><br><span class="line">    assert.equal(err, <span class="literal">null</span>);</span><br><span class="line">    assert.equal(<span class="number">3</span>, result.result.n);</span><br><span class="line">    assert.equal(<span class="number">3</span>, result.ops.length);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Inserted 3 documents into the collection"</span>);</span><br><span class="line">    callback(result);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所述<strong>插入件</strong>命令返回具有以下字段的对象：</p><ul><li><strong>result</strong>包含MongoDB的结果文档</li><li><strong>ops</strong>包含使用添加的<strong>_id</strong>字段插入的文档</li><li><strong>connection</strong>包含用于执行插入的连接</li></ul><p>添加以下代码以调用<strong>insertDocuments</strong>函数：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected successfully to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  insertDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    client.close();</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>运行更新的<strong>app.js</strong>文件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></tbody></table></figure><p>该操作返回以下输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">已成功连接到服务器</span><br><span class="line">在集合中插入3个文档</span><br></pre></td></tr></tbody></table></figure><h3 id="查找所有文档"><a href="#查找所有文档" class="headerlink" title="查找所有文档"></a>查找所有文档</h3><p>添加一个返回所有文档的查询。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  findDocuments  =  <span class="function"><span class="keyword">function</span>（<span class="title">db</span>，<span class="title">callback</span>）</span>{</span><br><span class="line">   <span class="comment">//获取文档集合</span></span><br><span class="line">    <span class="keyword">const</span> collection = db.collection(<span class="string">'documents'</span>);</span><br><span class="line">  <span class="comment">//找一些文件</span></span><br><span class="line">  collection.find({}).toArray(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>{</span><br><span class="line">    assert.equal(err,npx ll);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Found the following records"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(docs)</span><br><span class="line">    callback(docs);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此查询返回<strong>文档</strong>集合中的所有<strong>文档</strong>。将<strong>findDocument</strong>方法添加到<strong>MongoClient.connect</strong>回调：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected correctly to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  insertDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    findDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      client.close();</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="使用查询过滤器查找文档"><a href="#使用查询过滤器查找文档" class="headerlink" title="使用查询过滤器查找文档"></a>使用查询过滤器查找文档</h3><p>添加查询过滤器以仅查找符合查询条件的文档。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  findDocuments  =  <span class="function"><span class="keyword">function</span>（<span class="title">db</span>，<span class="title">callback</span>）</span>{</span><br><span class="line">   <span class="comment">//获取文档集合</span></span><br><span class="line">   <span class="keyword">const</span> collection = db.collection(<span class="string">'documents'</span>);</span><br><span class="line">  <span class="comment">//找一些文件</span></span><br><span class="line">  collection.find({<span class="string">'a'</span>: <span class="number">3</span>}).toArray(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>{</span><br><span class="line">    assert.equal(err, <span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Found the following records"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(docs);</span><br><span class="line">    callback(docs);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>只<code>'a' : 3</code>应返回匹配的文档。</p><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>以下操作更新<strong>文档</strong>集合中的<strong>文档</strong>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  updateDocument  =  <span class="function"><span class="keyword">function</span>（<span class="title">db</span>，<span class="title">callback</span>）</span>{</span><br><span class="line">   <span class="comment">//获取文档集合</span></span><br><span class="line"> <span class="keyword">const</span> collection = db.collection(<span class="string">'documents'</span>);</span><br><span class="line">  <span class="comment">//更新文件，其中a为2，设置b等于1个</span></span><br><span class="line">  collection.updateOne({ <span class="attr">a</span> : <span class="number">2</span> }</span><br><span class="line">    , { <span class="attr">$set</span>: { <span class="attr">b</span> : <span class="number">1</span> } }, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>{</span><br><span class="line">    assert.equal(err, <span class="literal">null</span>);</span><br><span class="line">    assert.equal(<span class="number">1</span>, result.result.n);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Updated the document with the field a equal to 2"</span>);</span><br><span class="line">    callback(result);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>该方法通过将新字段<strong>b</strong>添加到文档集<strong>1</strong>来更新字段<strong>a</strong>等于<strong>2</strong>的第一个文档。接下来，从<strong>MongoClient.connect</strong>更新回调函数以包含更新方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected successfully to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  insertDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    updateDocument(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      client.close();</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>删除字段<strong>a</strong>等于<strong>3</strong>的文档。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  removeDocument  =  <span class="function"><span class="keyword">function</span>（<span class="title">db</span>，<span class="title">callback</span>）</span>{</span><br><span class="line">   <span class="comment">//获取文档集合</span></span><br><span class="line">   <span class="keyword">const</span> collection = db.collection(<span class="string">'documents'</span>);</span><br><span class="line">  <span class="comment">//删除a为3 </span></span><br><span class="line">  collection.deleteOne({ <span class="attr">a</span> : <span class="number">3</span> }, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>{</span><br><span class="line">    assert.equal(err, <span class="literal">null</span>);</span><br><span class="line">    assert.equal(<span class="number">1</span>, result.result.n);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Removed the document with the field a equal to 3"</span>);</span><br><span class="line">    callback(result);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将新方法添加到<strong>MongoClient.connect</strong>回调函数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected successfully to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  insertDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    updateDocument(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      removeDocument(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        client.close();</span><br><span class="line">      });</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="索引集合"><a href="#索引集合" class="headerlink" title="索引集合"></a>索引集合</h3><p><a href="https://docs.mongodb.org/manual/indexes/" target="_blank" rel="noopener">索引</a>可以提高应用程序的性能。以下函数在<strong>文档</strong>集合中<strong>的</strong>字段 上创建索引。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> indexCollection = <span class="function"><span class="keyword">function</span>(<span class="params">db, callback</span>) </span>{</span><br><span class="line">  db.collection(<span class="string">'documents'</span>).createIndex(</span><br><span class="line">    { <span class="string">"a"</span>: <span class="number">1</span> },</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(results);</span><br><span class="line">        callback();</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>将<code>indexCollection</code>方法添加到您的应用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  MongoClient  =  <span class="built_in">require</span>（<span class="string">' mongodb '</span>）。MongoClient ;</span><br><span class="line"><span class="keyword">const</span>  assert  =  <span class="built_in">require</span>（<span class="string">' assert '</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接URL </span></span><br><span class="line"><span class="keyword">const</span>  url  =  <span class="string">' mongodb：// localhost：27017 '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  dbName  =  <span class="string">' myproject '</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect方法连接到服务器</span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, client</span>) </span>{</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log（“成功连接到服务器”）;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  insertDocuments(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    indexCollection(db, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">      client.close();</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>有关更多详细信息，请参阅<a href="https://github.com/mongodb/node-mongodb-native/blob/master/docs/reference/content/tutorials/main.md" target="_blank" rel="noopener">教程</a>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt;: &lt;a href=&quot;https://github.c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【Linux】Linux利用远程SSH连接SecureCRT中文出现乱码解决办法</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Linux%E5%88%A9%E7%94%A8%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5SecureCRT%E4%B8%AD%E6%96%87%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Linux%E5%88%A9%E7%94%A8%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5SecureCRT%E4%B8%AD%E6%96%87%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2019-11-15T19:29:36.353Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1. 修改远程linux机器的配置</code></pre><p>　　<code>vim /etc/sysconfig/i18n</code></p><p>　　把LANG改成支持UTF-8的字符集</p><p>　　如：</p><p>　<code>LANG="zh_CN.UTF-8"</code></p><p>　　或者是</p><p>　　<code>LANG="en_US.UTF-8"</code></p><pre><code>2. 改Secure CRT的设置</code></pre><p>　　选项-》会话选项-》外观-》字符编码-》<code>uft-8</code></p><pre><code>3. 退出，重新登录。</code></pre><p>　　<code>utf8</code>的文件与文件名均可以正常阅读了。</p><pre><code>上面就是Linux下SecureCRT中文显示乱码的解决方法，如果你使用中文语言的SecureCRT时出现乱码，可按文中介绍的方法对LANG进行修改。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1. 修改远程linux机器的配置&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　&lt;code&gt;vim /etc/sysconfig/i18n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　把LANG改成支持UTF-8的字符集&lt;/p&gt;
&lt;p&gt;　　如：&lt;/p&gt;
&lt;p&gt;　&lt;code&gt;LAN
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Linux报找不到bin、bash问题</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Linux%E6%8A%A5%E6%89%BE%E4%B8%8D%E5%88%B0bin%E3%80%81bash%E9%97%AE%E9%A2%98/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Linux%E6%8A%A5%E6%89%BE%E4%B8%8D%E5%88%B0bin%E3%80%81bash%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-15T19:29:36.353Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="写了一个shell脚本，然后放到linux下跑的时候，我用指令："><a href="#写了一个shell脚本，然后放到linux下跑的时候，我用指令：" class="headerlink" title="写了一个shell脚本，然后放到linux下跑的时候，我用指令："></a>写了一个shell脚本，然后放到linux下跑的时候，我用指令：</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x david_build.sh</span><br><span class="line"></span><br><span class="line">./david_build.sh</span><br></pre></td></tr></tbody></table></figure><p>但是却没有任何反应。报错 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“david_build.sh  /bin/bash^M:   坏的解释器：没有那个文件或目录”。</span><br></pre></td></tr></tbody></table></figure><h5 id="最后，怀疑是空格-r和-n引起的，就执行了替换命令："><a href="#最后，怀疑是空格-r和-n引起的，就执行了替换命令：" class="headerlink" title="最后，怀疑是空格\r和\n引起的，就执行了替换命令："></a>最后，怀疑是空格\r和\n引起的，就执行了替换命令：</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/\r$//' david_build.sh</span><br></pre></td></tr></tbody></table></figure><h5 id="会把-david-build-sh-中的-r-替换成空白！最后，问题解决，成功可以执行。"><a href="#会把-david-build-sh-中的-r-替换成空白！最后，问题解决，成功可以执行。" class="headerlink" title="会把 david_build.sh 中的\r 替换成空白！最后，问题解决，成功可以执行。"></a>会把 david_build.sh 中的\r 替换成空白！最后，问题解决，成功可以执行。</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;写了一个shell脚本，然后放到linux下跑的时候，我用指令：&quot;&gt;&lt;a href=&quot;#写了一个shell脚本，然后放到linux下跑的时候，我用指令：&quot; class=&quot;headerlink&quot; title=&quot;写了一个shell脚本，然后放到linux下跑的时候，我
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Centos7 关闭防火墙方法详解</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Centos7%20%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Linux%E3%80%91Centos7%20%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-11-15T19:29:36.352Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos7-关闭防火墙"><a href="#Centos7-关闭防火墙" class="headerlink" title="Centos7 关闭防火墙"></a>Centos7 关闭防火墙</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p><p>1、直接关闭防火墙</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></tbody></table></figure><p>2、设置 iptables service（后面是安装iptables，若本地没有可省略)</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></tbody></table></figure><p>如果要修改防火墙配置，如增加防火墙端口3306</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></tbody></table></figure><p>增加规则</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></tbody></table></figure><p>保存退出后</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class="line"></span><br><span class="line">systemctl enable iptables.service #设置防火墙开机启动</span><br></pre></td></tr></tbody></table></figure><p>最后重启系统使设置生效即可。</p><p>其他系统关闭防火墙即可。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Centos7-关闭防火墙&quot;&gt;&lt;a href=&quot;#Centos7-关闭防火墙&quot; class=&quot;headerlink&quot; title=&quot;Centos7 关闭防火墙&quot;&gt;&lt;/a&gt;Centos7 关闭防火墙&lt;/h2&gt;&lt;p&gt;CentOS 7.0默认使用的是firewall作为
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://wisdows.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【JDK】Linux安装源码包JDK完整步骤</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90JDK%E3%80%91Linux%E5%AE%89%E8%A3%85%E6%BA%90%E7%A0%81%E5%8C%85JDK%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90JDK%E3%80%91Linux%E5%AE%89%E8%A3%85%E6%BA%90%E7%A0%81%E5%8C%85JDK%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/</id>
    <published>2019-11-15T19:29:36.348Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="【JDK】Linux安装源码包JDK完整步骤"><a href="#【JDK】Linux安装源码包JDK完整步骤" class="headerlink" title="【JDK】Linux安装源码包JDK完整步骤"></a>【JDK】Linux安装源码包JDK完整步骤</h5><p>1、检查一下系统中的jdk版本</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# java -version</span><br></pre></td></tr></tbody></table></figure><p>显示：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version "1.8.0_102"</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</span><br></pre></td></tr></tbody></table></figure><p>2、检测jdk安装包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# rpm -qa | grep java`</span><br><span class="line">    java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">    python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">    tzdata-java-2016g-2.el7.noarch</span><br><span class="line">    javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">    java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">    java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">    java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></tbody></table></figure><p>3、卸载openjdk</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# rpm -e --nodeps tzdata-java-2016g-2.el7.noarch</span><br><span class="line">[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br></pre></td></tr></tbody></table></figure><p>或者使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jvm]# yum remove *openjdk*</span><br><span class="line">之后再次输入rpm -qa | grep java 查看卸载情况：</span><br><span class="line"></span><br><span class="line">[root@localhost software]# rpm -qa | grep java</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br></pre></td></tr></tbody></table></figure><p>4、安装新的jdk</p><p>首先到jdk官网上下载你想要的jdk版本，下载完成之后将需要安装的jdk安装包放到Linux系统指定的文件夹下，并且命令进入该文件夹下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# ll</span><br><span class="line">total 252664</span><br><span class="line">-rw-r--r--. 1 root root  11830603 Jun  9 06:43 alibaba-rocketmq-3.2.6.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root  43399561 Jun  9 06:42 apache-activemq-5.11.1-bin.tar.gz</span><br><span class="line">-rwxrw-rw-. 1 root root 185540433 Apr 21 09:06 jdk-8u131-linux-x64.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root   1547695 Jun  9 06:44 redis-3.2.9.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root  16402010 Jun  9 06:40 zookeeper-3.4.5.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>解压 jdk-8u131-linux-x64.tar.gz安装包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# mkdir -p /usr/lib/jvm</span><br><span class="line">[root@localhost software]# tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></tbody></table></figure><p>5、设置环境变量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# vim /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>在最前面添加：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131  </span><br><span class="line">export JRE_HOME=${JAVA_HOME}/jre  </span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  </span><br><span class="line">export  PATH=${JAVA_HOME}/bin:$PATH</span><br></pre></td></tr></tbody></table></figure><p>6、执行profile文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# source /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>这样可以使配置不用重启即可立即生效。</p><p>7、检查新安装的jdk</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost software]# java -version</span><br></pre></td></tr></tbody></table></figure><p>显示：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java version "1.8.0_131"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</span><br></pre></td></tr></tbody></table></figure><p>到此为止，整个安装过程结束。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;【JDK】Linux安装源码包JDK完整步骤&quot;&gt;&lt;a href=&quot;#【JDK】Linux安装源码包JDK完整步骤&quot; class=&quot;headerlink&quot; title=&quot;【JDK】Linux安装源码包JDK完整步骤&quot;&gt;&lt;/a&gt;【JDK】Linux安装源码包JDK完整
      
    
    </summary>
    
    
      <category term="Java后端" scheme="https://wisdows.github.io/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="JDK" scheme="https://wisdows.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】利用node、hexo实现博客后台运行。</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Hexo%E3%80%91%E5%88%A9%E7%94%A8node%E3%80%81hexo%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E3%80%82/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Hexo%E3%80%91%E5%88%A9%E7%94%A8node%E3%80%81hexo%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E3%80%82/</id>
    <published>2019-11-15T19:29:36.336Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="用pm2-来接管hexo的进程"><a href="#用pm2-来接管hexo的进程" class="headerlink" title="用pm2 来接管hexo的进程"></a>用pm2 来接管hexo的进程</h5><h6 id="开始操作-安装pm2"><a href="#开始操作-安装pm2" class="headerlink" title="开始操作.安装pm2"></a>开始操作.安装pm2</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm  install -g pm2</span><br></pre></td></tr></tbody></table></figure><h6 id="写一个执行脚本-在博客根目录下面创建一个hexo-run-js"><a href="#写一个执行脚本-在博客根目录下面创建一个hexo-run-js" class="headerlink" title="写一个执行脚本.在博客根目录下面创建一个hexo_run.js"></a>写一个执行脚本.在博客根目录下面创建一个hexo_run.js</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//run</span><br><span class="line">const { exec } = require('child_process')</span><br><span class="line">exec('hexo server',(error, stdout, stderr) =&gt; {</span><br><span class="line">        if(error){</span><br><span class="line">                console.log('exec error: ${error}')</span><br><span class="line">                return</span><br><span class="line">        }</span><br><span class="line">        console.log('stdout: ${stdout}');</span><br><span class="line">        console.log('stderr: ${stderr}');</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h6 id="运行脚本-在根目录下执行。"><a href="#运行脚本-在根目录下执行。" class="headerlink" title="运行脚本.在根目录下执行。"></a>运行脚本.在根目录下执行。</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pm2 start hexo_run.js</span><br></pre></td></tr></tbody></table></figure><p>如果关闭，可以使用关闭命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop hexo_run</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;用pm2-来接管hexo的进程&quot;&gt;&lt;a href=&quot;#用pm2-来接管hexo的进程&quot; class=&quot;headerlink&quot; title=&quot;用pm2 来接管hexo的进程&quot;&gt;&lt;/a&gt;用pm2 来接管hexo的进程&lt;/h5&gt;&lt;h6 id=&quot;开始操作-安装pm2&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Nodejs" scheme="https://wisdows.github.io/categories/Nodejs/"/>
    
    
      <category term="Hexo" scheme="https://wisdows.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】Hexo搭建静态博客教程</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Hexo%E3%80%91Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Hexo%E3%80%91Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-15T19:29:36.334Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="首先安装好git和nodejs"><a href="#首先安装好git和nodejs" class="headerlink" title="首先安装好git和nodejs"></a>首先安装好git和nodejs</h5><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><h5 id="新建一个blog的目录，然后在该目录依次执行以下命令"><a href="#新建一个blog的目录，然后在该目录依次执行以下命令" class="headerlink" title="新建一个blog的目录，然后在该目录依次执行以下命令"></a>新建一个blog的目录，然后在该目录依次执行以下命令</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><h5 id="执行完成后，输入以下命令，然后通过访问-http-localhost-4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。"><a href="#执行完成后，输入以下命令，然后通过访问-http-localhost-4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。" class="headerlink" title="执行完成后，输入以下命令，然后通过访问:http://localhost:4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。"></a>执行完成后，输入以下命令，然后通过访问:<a href="http://localhost:4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。" target="_blank" rel="noopener">http://localhost:4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。</a></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><h5 id="修改主题，比如已经下载过yilia-只需修改-config-yml中theme-为"><a href="#修改主题，比如已经下载过yilia-只需修改-config-yml中theme-为" class="headerlink" title="修改主题，比如已经下载过yilia.只需修改_config.yml中theme:为"></a>修改主题，比如已经下载过yilia.只需修改_config.yml中theme:为</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></tbody></table></figure><h5 id="hexo命令解析"><a href="#hexo命令解析" class="headerlink" title="hexo命令解析"></a>hexo命令解析</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,生成静态文件 </span><br><span class="line">hexo s #完整命令为hexo server,启动服务器,本地可以测试 </span><br><span class="line">hexo d #完整命令为hexo deploy,将本地编译好的静态文件发布到github上 </span><br><span class="line">hexo n #完整命令为hexo new,新建一篇文章 </span><br><span class="line">hexo clean #清除当前项目的静态文件</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s #命令一起执行</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;首先安装好git和nodejs&quot;&gt;&lt;a href=&quot;#首先安装好git和nodejs&quot; class=&quot;headerlink&quot; title=&quot;首先安装好git和nodejs&quot;&gt;&lt;/a&gt;首先安装好git和nodejs&lt;/h5&gt;&lt;h5 id=&quot;安装hexo&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Nodejs" scheme="https://wisdows.github.io/categories/Nodejs/"/>
    
    
      <category term="Hexo" scheme="https://wisdows.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】docker镜像、容器的备份与还原</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E9%95%9C%E5%83%8F%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E9%95%9C%E5%83%8F%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2019-11-15T19:29:36.333Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-备份容器"><a href="#1-备份容器" class="headerlink" title="1. 备份容器"></a>1. 备份容器</h5><p>首先，为了备份Docker中的容器，我们会想看看我们想要备份的容器列表。要达成该目的，我们需要在我们运行着Docker引擎，并已创建了容器的Linux机器中运行 docker ps 命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></tbody></table></figure><p>在此之后，我们要选择我们想要备份的容器，然后去创建该容器的快照。我们可以使用 docker commit 命令来创建快照。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -p 4fb8f18f20b4 container-backup</span><br></pre></td></tr></tbody></table></figure><p>该命令会生成一个作为Docker镜像的容器快照，我们可以通过运行 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><p>命令来查看Docker镜像，如下。</p><p>正如我们所看见的，上面做的快照已经作为Docker镜像保存了。现在，为了备份该快照，我们有两个选择，一个是我们可以登录进Docker注册中心，并推送该镜像；另一个是我们可以将Docker镜像打包成tar包备份，以供今后使用。</p><p>如果我们想要在DockerHub注册中心上传或备份镜像，我们只需要运行 docker login 命令来登录进Docker注册中心，然后推送所需的镜像即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></tbody></table></figure><p>将镜像添加添加tag。和自己的dockerhub账号一致。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag david_oracle_11g qq986945193/david_oracle_11g</span><br></pre></td></tr></tbody></table></figure><p>最后直接执行push命令，即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push qq986945193/david_oracle_11g</span><br></pre></td></tr></tbody></table></figure><p>如果我们不想备份到docker注册中心，而是想要将此镜像保存在本地机器中，以供日后使用，那么我们可以将其作为tar包备份。要完成该操作，我们需要运行以下 docker save 命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o ~/david_mysql.tar david_mysql</span><br></pre></td></tr></tbody></table></figure><p>要验证tar包是否已经生成，我们只需要在保存tar包的目录中运行 ls 命令即可。</p><h5 id="2-恢复容器"><a href="#2-恢复容器" class="headerlink" title="2. 恢复容器"></a>2. 恢复容器</h5><p>接下来，在我们成功备份了我们的Docker容器后，我们现在来恢复这些制作了Docker镜像快照的容器。如果我们已经在注册中心推送了这些Docker镜像，那么我们仅仅需要把那个Docker镜像拖回并直接运行即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull david/mysql:5.5</span><br></pre></td></tr></tbody></table></figure><p>但是，如果我们将这些Docker镜像作为tar包文件备份到了本地，那么我们只要使用 docker load 命令，后面加上tar包的备份路径，就可以加载该Docker镜像了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i ~/david_mysql.tar</span><br></pre></td></tr></tbody></table></figure><p>现在，为了确保这些Docker镜像已经加载成功，我们来运行 docker images 命令。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><p>在镜像被加载后，我们将用加载的镜像去运行Docker容器。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 david_mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="3-迁移Docker容器"><a href="#3-迁移Docker容器" class="headerlink" title="3. 迁移Docker容器"></a>3. 迁移Docker容器</h5><p>迁移容器同时涉及到了上面两个操作，备份和恢复。我们可以将任何一个Docker容器从一台机器迁移到另一台机器。在迁移过程中，首先我们将把容器备份为Docker镜像快照。然后，该Docker镜像或者是被推送到了Docker注册中心，或者被作为tar包文件保存到了本地。如果我们将镜像推送到了Docker注册中心，我们简单地从任何我们想要的机器上使用 docker run 命令来恢复并运行该容器。但是，如果我们将镜像打包成tar包备份到了本地，我们只需要拷贝或移动该镜像到我们想要的机器上，加载该镜像并运行需要的容器即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-备份容器&quot;&gt;&lt;a href=&quot;#1-备份容器&quot; class=&quot;headerlink&quot; title=&quot;1. 备份容器&quot;&gt;&lt;/a&gt;1. 备份容器&lt;/h5&gt;&lt;p&gt;首先，为了备份Docker中的容器，我们会想看看我们想要备份的容器列表。要达成该目的，我们需要在我们运行
      
    
    </summary>
    
    
      <category term="Java后端" scheme="https://wisdows.github.io/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Docker" scheme="https://wisdows.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】docker搭建本地gitlab，使用Git服务托管代码</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0gitlab%EF%BC%8C%E4%BD%BF%E7%94%A8Git%E6%9C%8D%E5%8A%A1%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0gitlab%EF%BC%8C%E4%BD%BF%E7%94%A8Git%E6%9C%8D%E5%8A%A1%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81/</id>
    <published>2019-11-15T19:29:36.331Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-首先下载gitlab的镜像"><a href="#1-首先下载gitlab的镜像" class="headerlink" title="1 首先下载gitlab的镜像"></a>1 首先下载gitlab的镜像</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></tbody></table></figure><h5 id="2-在服务器上创建目录，存放gitlab数据"><a href="#2-在服务器上创建目录，存放gitlab数据" class="headerlink" title="2 在服务器上创建目录，存放gitlab数据"></a>2 在服务器上创建目录，存放gitlab数据</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/work/ins/conf</span><br><span class="line">mkdir -p /home/work/ins/logs</span><br><span class="line">mkdir -p home/work/ins/data/gitlab</span><br></pre></td></tr></tbody></table></figure><h5 id="3-创建容器启动脚本。如果有以前执行过的，则停止并删除容器。"><a href="#3-创建容器启动脚本。如果有以前执行过的，则停止并删除容器。" class="headerlink" title="3 创建容器启动脚本。如果有以前执行过的，则停止并删除容器。"></a>3 创建容器启动脚本。如果有以前执行过的，则停止并删除容器。</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop gitlab &amp;&amp; sudo docker rm gitlab</span><br></pre></td></tr></tbody></table></figure><h5 id="4-启动，并设置端口号"><a href="#4-启动，并设置端口号" class="headerlink" title="4 启动，并设置端口号"></a>4 启动，并设置端口号</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run  -d \</span><br><span class="line">                 -p 2222:22 \</span><br><span class="line">                 -p 8888:80 \</span><br><span class="line">                 -p 8443:443 \</span><br><span class="line">         -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">                 -v  /home/work/ins/conf/gitlab:/etc/gitlab \</span><br><span class="line">                 -v /home/work/ins/logs/gitlab:/var/log/gitlab \</span><br><span class="line">                 -v /home/work/ins/data/gitlab/data:/var/opt/gitlab \</span><br><span class="line">                 -h gitlab \</span><br><span class="line">                 --name gitlab \</span><br><span class="line">                 --privileged=true \</span><br><span class="line">                 gitlab/gitlab-ce:latest</span><br></pre></td></tr></tbody></table></figure><h5 id="5-登录验证。ip地址加端口号访问即可。"><a href="#5-登录验证。ip地址加端口号访问即可。" class="headerlink" title="5 登录验证。ip地址加端口号访问即可。"></a>5 登录验证。ip地址加端口号访问即可。</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.111:8888</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-首先下载gitlab的镜像&quot;&gt;&lt;a href=&quot;#1-首先下载gitlab的镜像&quot; class=&quot;headerlink&quot; title=&quot;1 首先下载gitlab的镜像&quot;&gt;&lt;/a&gt;1 首先下载gitlab的镜像&lt;/h5&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="Java后端" scheme="https://wisdows.github.io/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Docker" scheme="https://wisdows.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】docker常用命令总结大全</title>
    <link href="https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E5%A4%A7%E5%85%A8/"/>
    <id>https://wisdows.github.io/2019/11/16/%E3%80%90Docker%E3%80%91docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E5%A4%A7%E5%85%A8/</id>
    <published>2019-11-15T19:29:36.330Z</published>
    <updated>2019-11-14T10:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="docker命令的具体使用参数帮助"><a href="#docker命令的具体使用参数帮助" class="headerlink" title="docker命令的具体使用参数帮助"></a>docker命令的具体使用参数帮助</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker 命令 --help</span><br></pre></td></tr></tbody></table></figure><h5 id="查看当前正在运行的容器"><a href="#查看当前正在运行的容器" class="headerlink" title="查看当前正在运行的容器"></a>查看当前正在运行的容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></tbody></table></figure><h5 id="查看所有容器的状态。最近运行过的所有容器"><a href="#查看所有容器的状态。最近运行过的所有容器" class="headerlink" title="查看所有容器的状态。最近运行过的所有容器"></a>查看所有容器的状态。最近运行过的所有容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></tbody></table></figure><h5 id="启动-停止某个容器"><a href="#启动-停止某个容器" class="headerlink" title="启动/停止某个容器"></a>启动/停止某个容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start/stop id/name</span><br></pre></td></tr></tbody></table></figure><h5 id="进入某个容器-使用exit退出后容器也跟着停止运行"><a href="#进入某个容器-使用exit退出后容器也跟着停止运行" class="headerlink" title="进入某个容器(使用exit退出后容器也跟着停止运行)"></a>进入某个容器(使用exit退出后容器也跟着停止运行)</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach id</span><br></pre></td></tr></tbody></table></figure><h5 id="启动一个伪终端以交互式的方式进入某个容器"><a href="#启动一个伪终端以交互式的方式进入某个容器" class="headerlink" title="启动一个伪终端以交互式的方式进入某个容器"></a>启动一个伪终端以交互式的方式进入某个容器</h5> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  exec -it   9af8c6c13cb4（容器ID）   /bin/bash</span><br></pre></td></tr></tbody></table></figure><h5 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><h5 id="删除某个容器"><a href="#删除某个容器" class="headerlink" title="删除某个容器"></a>删除某个容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm id/name</span><br></pre></td></tr></tbody></table></figure><h5 id="删除某个镜像"><a href="#删除某个镜像" class="headerlink" title="删除某个镜像"></a>删除某个镜像</h5><h6 id="有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f-强制删除"><a href="#有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f-强制删除" class="headerlink" title="有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除"></a>有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi id/name</span><br></pre></td></tr></tbody></table></figure><h5 id="复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash"><a href="#复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash" class="headerlink" title="复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash"></a>复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test -ti ubuntu /bin/bash</span><br></pre></td></tr></tbody></table></figure><h5 id="Docker容器中使用vi编辑器"><a href="#Docker容器中使用vi编辑器" class="headerlink" title="Docker容器中使用vi编辑器"></a>Docker容器中使用vi编辑器</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vi</span><br><span class="line"></span><br><span class="line">这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。安装V编辑器。</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;docker命令的具体使用参数帮助&quot;&gt;&lt;a href=&quot;#docker命令的具体使用参数帮助&quot; class=&quot;headerlink&quot; title=&quot;docker命令的具体使用参数帮助&quot;&gt;&lt;/a&gt;docker命令的具体使用参数帮助&lt;/h5&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Java后端" scheme="https://wisdows.github.io/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Docker" scheme="https://wisdows.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
